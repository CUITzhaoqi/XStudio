//xlang Source, Name:XDebugPort.xcsm 
//Date: Thu Sep 12:47:45 2018 

class XDebugPipe : Stream{
	int debugport;
	long readfd;
	long writefd;
    bool bforServer = false;
	Object readlock = new Object();
    Object writelock = new Object();
    
	public XDebugPipe(){
		readfd = writefd = debugport = 0;
	}
    public XDebugPipe(bool _bforServer){
		readfd = writefd = debugport = 0;
        bforServer = _bforServer;
	}
	public XDebugPipe(int port){
		readfd = writefd = 0;
		debugport = port;
	}
    public bool setForServer(bool bf){
        if (readfd == 0 && writefd == 0){
            bforServer = bf;
            return true;
        }
        return false;
    }
    public bool prepareForPipe(){
    	String readport = String.format("XDEBUG_WRITE_%d", debugport);
		String writeport = String.format("XDEBUG_READ_%d", debugport);
        
        readfd = _system_.createPipe(bforServer ? writeport : readport, bforServer);
        if (readfd != 0){
			writefd = _system_.createPipe(bforServer ? readport : writeport, bforServer);
            if (writefd == 0){
				_system_.closePipe(readfd);
                return false;
            }else{
				return true;
            }
        }
        return false;
    }
    
	public bool createstream(){
		synchronized(readlock){
			synchronized(writelock){
				if (readfd != 0 && writefd != 0){
					if (_system_.openPipe(writefd, false) == false){
						return false;
					}                
					if (_system_.openPipe(readfd, true) == false){
						return false;
					}
				}else{
					return false;
				}
			}
        }
		return true;
	}

	public int read(byte[] buffer,int pos, int countOfByte)override{
		int rd = -1;
		synchronized(readlock){
			if (readfd != 0){
				rd = _system_.readPipe(readfd, buffer, pos, countOfByte);
            }else{
				return -1;
            }
		}
        if (rd < 0){
			close();
        }
        return rd;
	}

	public int write(byte[] buffer, int pos, int countOfByte) override{
		int rd = 0;
		synchronized(writelock){
			if (readfd != 0){
				rd = _system_.writePipe(writefd, buffer, pos, countOfByte);
            }else{
				return -1;
            }
		}
        if (rd < 0){
			close();
        }
        return rd;
	}

	public final void close() override{
		synchronized(readlock)
        {
			if (readfd != 0){
				_system_.closePipe(readfd);
                readfd = 0;
			}
        }
        synchronized(writelock)
        {
			if (writefd != 0){
				_system_.closePipe(writefd);
                writefd = 0;
			}
		}
	}
    
    public long seek(int ,long)override{
		return 0;
    }
    
    public long getPosition()override{
		return 0;
    }
    
    public long length()override{return 0;}
    public long available(bool)override{return 0;}
    
    public void finalize(){
		close();
    }
};