//xlang Source, Name:XIndex.xcsm
//Date: Wed Sep 21:21:54 2018

class XIndexWindow : QXMdiSubWindow
{
    public QXWidget indexPage;
    QXLabel [] labels = new QXLabel[10];
    QXLabel lblnew, lblopen, verslabel;
    QXLabel lblhelp, lblrule;
    

    Object state;
    Recently.RecentlyObject [] objects = new Recently.RecentlyObject[10];
    public bool create(QXWidget parent)
    {
        if (super.create(parent)) {
            indexPage = new QXWidget();
            if (indexPage.load("ui/index.ui") == false) {
                return false;
            }

            if (_system_.getPlatformId() == _system_.PLATFORM_MACOSX) {
                //qt在macos下有widget背景和别的平台不一致的情况，所以这里手动设置一下风格
                String wqss = "#Form{background-color:#3e3e42;}";
                if (Setting.isDarkStyle() == false) {
                    wqss = "#Form{background-color:#f0f0f0;}";
                }
                indexPage.setStyleSheetString(wqss);
            }
            setWidget(indexPage);
            indexPage.show();
            setMaximized(true);
            verslabel = (QXLabel)indexPage.findByName("label");

            lblrule = (QXLabel)indexPage.findByName("label_22");
            lblhelp = (QXLabel)indexPage.findByName("label_17");

            lblnew = (QXLabel)indexPage.findByName("lblnew");
            lblopen = (QXLabel)indexPage.findByName("lblopen");

            verslabel.setText("XStudio " + Utils.getAppMajorVersion());
            for (int i =0; i < 10; i ++) {
                labels[i] = (QXLabel)indexPage.findByName("rl" + i);
                labels[i].setOnMouseEventListener(recentlistener);
            }

            loadRecent();
            state = XWorkspace.hideDocks();

            lblhelp.setOnMouseEventListener(new onMouseEventListener() {
                void onMouseButtonRelease(QXObject obj, int Button, int x, int y, int flags, int source) {
                    if (Button == 1) {
                        String url = _system_.getAppPath().findVolumePath().appendPath("./document/html/index.html");
                        QXCore.openLocal(String.formatPath(url, false));
                    }
                }
            });

            lblrule.setOnMouseEventListener(new onMouseEventListener() {
                void onMouseButtonRelease(QXObject obj, int Button, int x, int y, int flags, int source) {
                    if (Button == 1) {
                        String url = _system_.getAppPath().findVolumePath().appendPath("./document/xrule.html");
                        QXCore.openLocal(String.formatPath(url, false));
                    }
                }
            });

            lblnew.setOnMouseEventListener(new onMouseEventListener() {
                void onMouseButtonRelease(QXObject obj, int Button, int x, int y, int flags, int source) {
                    if (Button == 1) {
                        XWorkspace.workspace.createProject();
                    }
                }
            });

            lblopen.setOnMouseEventListener(new onMouseEventListener() {
                void onMouseButtonRelease(QXObject obj, int Button, int x, int y, int flags, int source) {
                    if (Button == 1) {
                        XWorkspace.workspace.doOpen();
                    }
                }
            });

            return true;
        }
        return false;
    }



    onMouseEventListener recentlistener =  new onMouseEventListener()
    {
        void onMouseButtonRelease(QXObject obj, int Button, int x, int y, int flags, int source) {
            if (Button == 1) {
                for (int i = 0; i < 10; i ++) {
                    if (labels[i] == obj) {
                        XWorkspace.workspace.loadProject(objects[i].path);
                        break;
                    }
                }
            }
        }
    };


    public bool onClose()override
    {
        XWorkspace.workspace.indexPage = nilptr;
        restore();
        return true;
    }

    public void restore()
    {
        if (state != nilptr) {
            XWorkspace.showDocks(state);
        }
    }

    public void loadRecent()
    {
        int c = Recently.count();
        int rl = 0;
        if (c > 10) {
            c = 10;
        }
        for (int i = c - 1; i >= 0; i --) {
            objects[rl] = Recently.getItem(i);
            String proj_file_path = String.formatPath(objects[rl].path,false);
            labels[rl].setText("<a style=\"color:#1684fb\">" + objects[rl].name + "</a> <small><em style=\"color:#fb8416\">" + objects[rl].date + "</small></em> <br /><a style=\" font-size:11px;text-overflow: ellipsis;overflow: hidden;\">" + proj_file_path + "</a>");
            labels[rl].setToolTips(proj_file_path);
            rl++;
        }

        while (rl < 10) {
            labels[rl++].hide();
        }
    }
};