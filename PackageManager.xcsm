//xlang Source, Name:PackageManager.xcsm 
//Date: Fri Dec 22:24:41 2018 

class PackageManager{
	JsonObject root;
    
    public static class PackageInfo{
		public int id = -1;
		public String name;
        public String version;
        public String filepath;
        public String iconFile;
        public String descr;
        public String author;
        public String url;
        public long   dlsize;
        public String cacheFile;
        //String message;
        public PackageInfo(int _id,JsonObject jo){
			id = _id;
			name = jo.getString("package");
            version = jo.getString("version");
            descr = jo.getString("descr");
            author = jo.getString("author");
            iconFile = String.formatPath(XPlatform.getAppDirectory().appendPath(jo.getString("icon")), false);
            if (XPlatform.existsSystemFile(iconFile) == false){
				iconFile = "";
            }
            filepath = String.formatPath(_system_.getAppDirectory().appendPath(jo.getString("file")), false);
        }
        
        public bool detectCache(){
            cacheFile = XPlatform.getAppDirectory().appendPath("package_cache");
            XPlatform.mkdir(cacheFile);
            cacheFile = String.formatPath(cacheFile.appendPath(name + version),false);
            
            if (dlsize > 0){
                try{
                    return XPlatform.SystemFileSize(cacheFile) == dlsize;
                }catch(Exception e){
                    
                }
            }
            return false;
        }
        
        public PackageInfo(JsonObject jo){
            name = jo.getString("pkgid");
            version = jo.getString("version");
            descr = jo.getString("description");
            dlsize = jo.getString("dlsize").parseLong();
            url = jo.getString("url");
            author = jo.getString("publisher");
        }
        
        public PackageInfo(JsonObject jo, String file){
			id = -1;
			name = jo.getString("package");
            version = jo.getString("version");
            descr = jo.getString("descr");
            author = jo.getString("author");
            filepath = file;
        }
        
        public bool extartIconTo(ZipArchive zs, String oufile){
            XPlatform.deleteFile(oufile);
			ZipEntry entry = zs.findEntry("icon.png");
            if (entry != nilptr){
				ZipFile file = entry.getFile();
                if (file != nilptr){
					if (file.open()){
						byte []buf = new byte[1024];
						FileOutputStream fos = new FileOutputStream(oufile);
						int rd = 0;
						while ((rd = file.read(buf, 0, 1024)) > 0){
							fos.write(buf, 0, rd);
						}
						file.close();
						fos.close();
                    }
                    return true;
                }
            }
            return false;
        }
        
        public String extartReadME(ZipArchive zs, String oufile){
			String stringout = "";
			ZipEntry entry = zs.findEntry("readme.md");
            if (entry != nilptr){
				ZipFile file = entry.getFile();
                if (file != nilptr){
					if (file.open()){
						byte []buf = new byte[1024];
						
						int rd = 0;
						while ((rd = file.read(buf, 0, 1024)) > 0){
							stringout = stringout + new String(buf, 0, rd);
						}
						file.close();
                    }
                }
            }
            return stringout;
        }
    };
    
    public bool load(){

		String package_dir = String.formatPath(_system_.getAppDirectory().appendPath("packages"), false);
		XPlatform.mkdir(package_dir);

		String pckInfo = package_dir.appendPath("packages.info");
        
        try{
			FileInputStream fis = new FileInputStream(pckInfo);
            byte [] data = fis.read();
            fis.close();
            
            String content = new String(data);
            
            root = new JsonObject(content);
            
            return root != nilptr;
        }catch(Exception e){
			root = new JsonObject();
            root.put("list", new JsonArray());
        }
        return false;
    }
    
    public int getCount(){
		JsonArray list = (JsonArray)root.get("list");
        if (list != nilptr){
			return list.length();
        }
        return 0;
    }
    
    public PackageInfo get(int id){
		JsonArray list = (JsonArray)root.get("list");
        if (list != nilptr){
			if (id < list.length() && id >= 0){
				JsonObject pi = (JsonObject)list.get(id);
                
                if (pi != nilptr){
					return new PackageInfo(id, pi);
                }
            }
        }
        return nilptr;
    }
    
    public Vector<PackageInfo> findPackages(String name, String version){
		Vector<PackageInfo> outpackages = new Vector<PackageInfo>();
		for (int i = 0, c = getCount(); i < c; i++){
			PackageInfo pj = get(i);
            if (pj.name.equals(name)){
				if (version == nilptr || pj.version.equals(version)){
					outpackages.add(pj);
                }
            }
        }
        return outpackages;
    }
    
    public PackageInfo findPackage(String name, String version){
		for (int i = 0, c = getCount(); i < c; i++){
			PackageInfo pj = get(i);
            if (pj.name.equals(name)){
				if (version == nilptr || version.length() == 0 || pj.version.equals(version)){
					return pj;
                }
            }
        }
        return nilptr;
    }
    
    public bool deletePackage(PackageInfo pi){
		JsonArray list = (JsonArray)root.get("list");
        if (list != nilptr){
			if (pi.id < list.length() && pi.id >= 0){
				list.remove(pi.id);
                XPlatform.deleteFile(pi.filepath);
                if (pi.iconFile != nilptr && pi.iconFile.length() > 0){
					XPlatform.deleteFile(pi.iconFile);
                }
                return true;
            }
        }
        return false;
    }
    
    
    public PackageInfo previewPackage(String file){
		FileInputStream fis;
        ZipArchive zs;
        
		try{
			fis = new FileInputStream(file);
            zs = new ZipArchive();
            
            if (zs.open(fis)){
				String info = zs.getComment();
                
                
                JsonObject jo = new JsonObject(info);
                
                if (jo != nilptr){
					PackageInfo pi = new PackageInfo(jo, file);
                    pi.iconFile = String.formatPath(_system_.getAppDirectory().appendPath("packages/preview.png"), false);
                    if (false == pi.extartIconTo(zs, pi.iconFile)){
                        pi.iconFile = nilptr;
                    }
                    //pi.message = pi.extartReadME(zs);
                    return pi;
                }
            }
            
            
        }catch(Exception e){
        
        }finally{
			if (zs != nilptr){
				zs.close();
            }
            if (fis != nilptr){
				fis.close();
            }
        }
        
        return nilptr;
    }
    
    
    public static bool copyFile(String dest, String src){
        try{

			FileOutputStream fos = new FileOutputStream(dest);
			FileInputStream fis = new FileInputStream(src);
			
			byte [] data = new byte[1024];
			
			int readed = 0;
			while ((readed = fis.read(data, 0, 1024)) > 0){
				fos.write(data, 0, readed);
			}
			
			fos.close();
			fis.close();
				
			return true;
        }catch(Exception e){
        
        }
        return false;
    }
    
    public bool installPackage(PackageInfo pi){
		String install_path = String.formatPath(_system_.getAppDirectory().appendPath("packages/" + pi.name + pi.version), false);
        String install_icon = String.formatPath(_system_.getAppDirectory().appendPath("packages/" + pi.name + pi.version + ".png"), false);
        
        try{
			JsonArray list = (JsonArray)root.get("list");
			if (copyFile(install_path, pi.filepath)){
				if (pi.iconFile != nilptr){
					copyFile(install_icon, pi.iconFile);
                }
                JsonObject json = new JsonObject();
                
                json.put("package", pi.name);
                json.put("version", pi.version);
                json.put("descr", pi.descr);
                json.put("author", pi.author);
                
                json.put("file", install_path.toRelativePath(_system_.getAppDirectory(), false, true));
                json.put("icon", install_icon.toRelativePath(_system_.getAppDirectory(), false, true));
                list.put(json);
                return save();
			}
        }catch(Exception e){
        
        }
        return false;
    }
    
    public bool save(){
		if (root != nilptr){
			String pckInfo = String.formatPath(_system_.getAppDirectory().appendPath("packages/packages.info"), false);
			
			try{
				FileOutputStream fis = new FileOutputStream(pckInfo);

				String content = root.toString(true);
				byte []data = content.getBytes();
                
				fis.write(data, 0, data.length);
                fis.close();
				return true;
			}catch(Exception e){
			
			}
        }
        return false;
    }
    
    
};