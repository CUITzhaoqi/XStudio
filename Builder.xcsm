
class Builder : IBuilder
{
    public static XWndOutput output;
    public static XWndInfor infownd;

    bool inConsole = false;
    Process buildProcess;


    public Builder()
    {
    }
    public Builder(bool bcon)
    {
        inConsole = bcon;
    }
    public static void clearAll(bool focus)
    {
        if (output != nilptr) {
            output.clearAll(focus);
            infownd.clear();
        }
    }
    public static void clearComm(bool focus)
    {
        if (output != nilptr) {
            output.clearComm(focus);
            infownd.clear();
        }
    }
    public String build(String compilerPath, String []args, String workDir, InformationParser parser, bool bForceArgs)override
    {
        String allInfo = nilptr;
        String argfilepath = nilptr;
        
        if (buildProcess == nilptr) {
            allInfo = "";
            String fullCommand = "";
            for (int i = 0; i < args.length; i++) {
                fullCommand = fullCommand + (args[i] + " ");
            }

            OutputText(XPlatform.converPlatformCharSetTo(fullCommand) + "\n", 0);
            
            
            if (bForceArgs == false && Setting.isUseArgfile()){
                argfilepath = workDir.appendPath("~tmp" + Math.random() + ".list");
                try{
                    FileOutputStream fos = new FileOutputStream(argfilepath);
                    String argcontent = "";
                    for (int i = 1; i < args.length; i++){
                        if (argcontent.length() != 0){
                            argcontent = argcontent + " ";
                        }
                        argcontent = argcontent + args[i];
                    }
                    fos.write(argcontent.getBytes());
                    fos.close();
                    
                }catch(Exception e){
                    OutputText("无法写入参数文件:\n[" + argfilepath + "]" , 0);
                    XPlatform.deleteFile(argfilepath);
                    return "";
                }
                
                String  [] __args  = {args[0],  ""};
                if (_system_.getPlatformId() == _system_.PLATFORM_WINDOWS){
                    __args[1] = "@\"" + argfilepath + "\"";
                }else{
                    __args[1] = "@" + argfilepath;
                }
                
                buildProcess = new Process(XPlatform.converToPlatformCharSet(compilerPath), __args);
            }else{
                buildProcess = new Process(XPlatform.converToPlatformCharSet(compilerPath), args);
            }

            buildProcess.setWorkDirectory(XPlatform.converToPlatformCharSet(workDir));

            try {
                if (buildProcess.create(Process.StdOut | Process.RedirectStdErr)) {
                    String lines = "";
                    try {
                        int rd = 0;
                        byte [] buffer = new byte[1024];

                        while ((rd = buildProcess.read(buffer, 0, 1024)) > 0) {
                            String rdinfo = new String(buffer, 0, rd);

                            lines = lines + rdinfo;
                            
                            if (parser != nilptr){
                                allInfo = parser.parse(allInfo + rdinfo);
                            }else{
                                allInfo = allInfo + rdinfo;
                            }

                            int lf = -1;
                            if ((lf = lines.lastIndexOf('\n')) != -1) {
                                String szOut = lines.substring(0, lf + 1);

                                if (lf + 1 < lines.length()) {
                                    lines = lines.substring(lf + 1, lines.length());
                                } else {
                                    lines ="";
                                }

                                OutputText(XPlatform.converPlatformCharSetTo(szOut), 0);
                            }
                        }

                    } catch(Exception e) {

                    }
                    OutputText(XPlatform.converPlatformCharSetTo(lines), 0);
                }
            } catch(Exception e) {
                String str = e.getMessage();
                if (_system_.getPlatformId() == 0) {
                    str = new String(str.getBytes(), "GB18030//IGNORE");
                    compilerPath = new String(compilerPath.getBytes(), "GB18030//IGNORE");
                }
                OutputText("运行编译器时发生错误:\n[" + compilerPath + "]" + str, 0);
            }
            buildProcess = nilptr;
        }

        if (argfilepath != nilptr){
            XPlatform.deleteFile(argfilepath);
        }
        return XPlatform.converPlatformCharSetTo(allInfo);
    }

    public void OutputText(String text, int id)override
    {
        if (inConsole == false) {
            output.output(text, id);
        } else {
            _system_.consoleWrite(XPlatform.converToPlatformCharSet(text));
        }
    }
    public void setCompileInfor(Vector<ICompileInfo> infos)override
    {
        if (inConsole == false) {
            infownd.showInfo(infos);
        }
    }
    public void complete(){
        if (inConsole == false) {
            infownd.completeCompile();
        } 
    }
};