//xlang Source, Name:XDebuggee.xcsm 
//Date: Mon Aug 16:07:23 2018 


class XDebuggee{
	
	 public static const int 
		TSTATUS_RUN = 0,
		TSTATUS_BREAK = 1;
     
     public static const int 	
		Unknow = 0,
		Interrupt = 1,
		Continue = 2,
		StepIn = 3,
		StepOver = 4,
		StepOut = 5,
		SetBreakPoint = 6,
		SetMemoryBreakPoint = 7,
		SetFunctionBreakPoint = 8,
		QueryStackStruct = 9,
		QueryStackObject = 10,
		QueryStackObjectDetails = 11,
		QueryHeapStruct = 12,
		QueryHeapObject = 13,
		QueryHeapObjectDetails = 14,
		QueryThreadCount = 15,
		QueryStackFrame = 16,
		SwitchThread = 17,
		QueryFrame = 18,
		QueryMemoryInfo = 19,
		GC = 20,
        Log = 21,
        TriggeBreakPoint = 22,
        WatchObject = 23,
        Active = 24,
        ExceptionInterrput = 25,
        Debug = 26,
        QueryObject = 27,
        GcDump = 28,
        QueryByName = 29,
        ModuleLoaded = 30,
        LookupMemory = 31,
        DumpMemory = 32,
        GCInfo = 33,
        DBGExit = 34,
        MessageBox = 35,
        MessageBoxReply = 36,
        QueryInstruction = 37,
        InstructionShow = 38,
        InstructionStepIn = 39,
        InstructionStepOver = 40,
        InstructionStepOut = 41,
        ModuleUnloaded = 42;
           
    public bool isDebugging = false;
     
    public const byte[] debug_helo = "XDEBUGGEE_V1 HELO\n".getBytes();
    Object pipeLock = new Object();
    Stream _pipe;
    XWorkspace _workspace;

    Map<int,bool> threadStatus = new Map<int,bool>();

	public XDebuggee(XWorkspace workspace){
		_workspace = workspace;
    }
    
    
    /*bool createDebugServer(IBuilder builder, ProjectPropInterface iprop){
        
        if (local_debugstream.prepareForPipe()){
			return true;
        }

        return false;
    }*/
    
    public void debugClose(){
		synchronized(pipeLock){
			if (_pipe != nilptr){
                _pipe = nilptr;
            }
        }
    }
    
    public void active(){
		BreakPointWnd.SendBreakPoint();
		WatchWnd.UpdateWatch();
		debugActive();
    }
    
    public void close(){
		synchronized(pipeLock){
			if (_pipe != nilptr){
				_pipe.close();
			}
		}
    }
    
    public bool debug_start(Stream _stream){
            
        if (_stream != nilptr){

			if (_stream.write(debug_helo, 0, debug_helo.length) > 0){
				byte []recvdata = new byte[22];

				int readed = 0;
                
                while (readed < 22){
					readed += _stream.read(recvdata, readed, 22 - readed) ;
                }

				if (readed == 22){
					String str = new String(recvdata);
					if (str.equals("XDEBUG_CLIENT_V1 RECV\n")){
						synchronized(pipeLock){
							_pipe = _stream;
						}
						isDebugging = true;

						debug();
						isDebugging = false;
                        cancelAllRequest();
						synchronized(pipeLock){
							if (_pipe != nilptr){
								_pipe = nilptr;
							}
						}
						//_system_.consoleWrite("\n调试器已分离!\n");
						return true;
					}
				}
			}else{
				_stream.close();
			}
        }
        return false;
    }
    
    public bool connect(IBuilder builder, String url, int port){
		StreamSocket _socket = new StreamSocket();
        builder.OutputText("\n正在连接到调试端口:" + port + "...\n", 1);
                
		if (_socket.connect(url, port)){
			builder.OutputText("\n已连接调试器!\n", 1);
			if (_socket.write(debug_helo, 0, debug_helo.length) > 0){
				byte []recvdata = new byte[22];

				int readed = 0;
                
                while (readed < 22){
					int rd = _socket.read(recvdata, readed, 22 - readed) ;
                    if (rd <=0){
						_socket.close();
                        builder.OutputText("\无法连接到远程调试端口!\n", 1);
                        return false;
                    }
					readed += rd;
                }
                
				if (readed == 22){
					String str = new String(recvdata);
                    
					if (str.equals("XDEBUG_CLIENT_V1 RECV\n")){
                    	synchronized(pipeLock){
							_pipe = _socket;
						}
						isDebugging = true;

						debug();
						isDebugging = false;
                        cancelAllRequest();
						synchronized(pipeLock){
							if (_pipe != nilptr){
								_pipe = nilptr;
							}
						}
						return true;
					}
				}
            }
            _socket.close();
        }
        return false;
    }
    
    public bool isDebuging(){
		return isDebugging;
    }
    
    public void queryObject(String queryId, String objectid, String param, long start, long end){
        JsonObject json = new JsonObject();
        json.put("queryid", queryId);
        json.put("param", param);
        json.put("id", objectid);
        
        json.put("offset", "" + start);
        json.put("end", "" + end);
        
        String text = json.toString(false);
        byte [] data = text.getBytes();
        sendCommand(QueryObject, 0, data, data.length);
    }
    
    public void lookupMemory(String address, int len){
		JsonObject json = new JsonObject();
        json.put("address",address);
        json.put("size",len);
        String text = json.toString(false);
        byte [] data = text.getBytes();
        sendCommand(LookupMemory, 0, data, data.length);
    }
    
    public void dumpMemory(String address, int len, String param){
		JsonObject json = new JsonObject();
        json.put("address",address);
        json.put("param",param);
        json.put("size",len);
        String text = json.toString(false);
        byte [] data = text.getBytes();
        sendCommand(DumpMemory, 0, data, data.length);
    }
    
    public void onQueryObject(JsonObject json){
		String param = json.getString("param");
        if (param.startWith("auto")){
			AutoWnd.auto_wnd.onQueryObject(json);
        }else
        if (param.startWith("watch")){
			WatchWnd.watchesWnd.onQueryObject(json);
        }
    }
    
    public void queryFrame(long thread, int frame){
		JsonObject json = new JsonObject();
        json.put("frame", frame);
        String text = json.toString(false);
        byte [] data = text.getBytes();
        sendCommand(QueryFrame, thread, data, data.length);
    }
    
    public void updateWatch(JsonArray objects, long thread, int frame, bool delete){
		JsonObject root = new JsonObject();
        root.put("names", objects);
        root.put("frame", frame);
        root.put("delete", delete ? 1 : 0);
        
        String text = root.toString(false);
        byte [] data = text.getBytes();
        sendCommand(WatchObject, thread, data, data.length);
    }
    
    public void setBreak(long tid){
		sendCommand(Interrupt, tid, new byte[0], 0);
    }    
    
    public void stepin(long tid){
		XStackInfor.clearBreak(tid);
		sendCommand(StepIn, tid, new byte[0], 0);
    }
    
    public void continuerun(long tid){
		XStackInfor.clearBreak(tid);
		sendCommand(Continue, tid, new byte[0], 0);
    }
    
    public void dumpObjects(){
		sendCommand(GcDump, 0, new byte[0], 0);
    }
    
    public void dbgSendExit(){
		sendCommand(DBGExit, 0, new byte[0], 0);
    }
    
    public static class QueryThread{
		public JsonObject object;
        public bool cancel = false;
    };
    
    public void cancelAllRequest(){
		synchronized(threadObject){
			Map.Iterator<long,QueryThread> iter = threadObject.iterator();
            
            while (iter.hasNext()){
				QueryThread qt = iter.getValue();
                synchronized(qt){
					qt.cancel = true;
					qt.notify();
				}
                iter.next();
            }
            
            threadObject.clear();
		}
    }
    
    Map<long,QueryThread> threadObject = new Map<long,QueryThread>();
    
    public JsonObject queryObjectByName(int thread, int frame, String name){
        JsonObject json = new JsonObject();
        json.put("queryid", "" + Thread.getId());
        json.put("param", "");
        json.put("name", name);
        json.put("tid", thread);
        json.put("frame", frame);
        
        String text = json.toString(false);
        byte [] data = text.getBytes();
        
        QueryThread qt = new QueryThread();
        
        synchronized(threadObject){
            threadObject.put(Thread.getId(), qt);
        }
        synchronized(qt){
			sendCommand(QueryByName, 0, data, data.length);
            while (qt.cancel == false && qt.object == nilptr){
				qt.wait();
            }
        }
        synchronized(threadObject){
            threadObject.remove(Thread.getId());
        }
        return qt.object;
    }
    
    public void onLookupMemory(JsonObject json){
		MemoryLookupWnd.SetData(json);
    }

    public void onDumpMemory(JsonObject json){
		MemoryLookupWnd.SetDumpData(json);
    }
    
    static int parseButtons(String button){
        int nbutton = QXMessageBox.Ok;
        
        if (button != nilptr){
            String [] btns = button.split("|");
            for (int i = 0; i < btns.length; i++){
                switch(btns[i]){
                    case "Ok":
                    nbutton |= QXMessageBox.Ok;
                    break;
                    case "Save":
                    nbutton |= QXMessageBox.Save;
                    break;
                    case "SaveAll":
                    nbutton |= QXMessageBox.SaveAll;
                    break;
                    case "Open":
                    nbutton |= QXMessageBox.Open;
                    break;
                    case "Yes":
                    nbutton |= QXMessageBox.Yes;
                    break;
                    case "YesToAll":
                    nbutton |= QXMessageBox.YesToAll;
                    break;
                    case "No":
                    nbutton |= QXMessageBox.No;
                    break;
                    case "NoToAll":
                    nbutton |= QXMessageBox.NoToAll;
                    break;
                    case "Abort":
                    nbutton |= QXMessageBox.Abort;
                    break;
                    case "Retry":
                    nbutton |= QXMessageBox.Retry;
                    break;
                    case "Ignore":
                    nbutton |= QXMessageBox.Ignore;
                    break;
                    case "Close":
                    nbutton |= QXMessageBox.Close;
                    break;
                    case "Cancel":
                    nbutton |= QXMessageBox.Cancel;
                    break;
                    case "Discard":
                    nbutton |= QXMessageBox.Discard;
                    break;
                    case "Help":
                    nbutton |= QXMessageBox.Help;
                    break;
                    case "Apply":
                    nbutton |= QXMessageBox.Apply;
                    break;
                    case "Reset":
                    nbutton |= QXMessageBox.Reset;
                    break;
                    case "RestoreDefaults":
                    nbutton |= QXMessageBox.RestoreDefaults;
                    break;
                    default:
                    case "NoButton":
                    nbutton |= QXMessageBox.NoButton;
                    break;
                }
            }
        }
        return nbutton;
    }
    
    
    String getButton(int bt){
        String sbutton = "";
        switch(bt){
            case QXMessageBox.Ok:
            sbutton = "Ok";
            break;
            case QXMessageBox.Save:
            sbutton = "Save";
            break;
            case QXMessageBox.SaveAll:
            sbutton = "SaveAll";
            break;
            case QXMessageBox.Open:
            sbutton = "Open";
            break;
            case QXMessageBox.Yes:
            sbutton = "Yes";
            break;
            case QXMessageBox.YesToAll:
            sbutton = "YesToAll";
            break;
            case QXMessageBox.No:
            sbutton = "No";
            break;
            case QXMessageBox.NoToAll:
            sbutton = "NoToAll";
            break;
            case QXMessageBox.Abort:
            sbutton = "Abort";
            break;
            case QXMessageBox.Retry:
            sbutton = "Retry";
            break;
            case QXMessageBox.Ignore:
            sbutton = "Ignore";
            break;
            case QXMessageBox.Close:
            sbutton = "Close";
            break;
            case QXMessageBox.Cancel:
            sbutton = "Cancel";
            break;
            case QXMessageBox.Discard:
            sbutton = "Discard";
            break;
            case QXMessageBox.Help:
            sbutton = "Help";
            break;
            case QXMessageBox.Apply:
            sbutton = "Apply";
            break;
            case QXMessageBox.Reset:
            sbutton = "Reset";
            break;
            case QXMessageBox.RestoreDefaults:
            sbutton = "RestoreDefaults";
            break;
            default:
            case QXMessageBox.NoButton:
            sbutton = "NoButton";
            break;
        }
        return sbutton;
    }
    
    String checkValue(String v, String def){
        if (v == nilptr){
            return def;
        }
        return v;
    }
    
    public void onMessageBox(JsonObject json){
        XWorkspace.workspace.mainWindow.runOnUi(new Runnable(){
            void run()override{
                try{
                    showMessageBox(json);
                }catch(Exception e){
                    
                }
            }
        });
    }
    
    public void showMessageBox(JsonObject json){
        String type = checkValue(json.getString("type"), "Critical");
        String message = checkValue(json.getString("message"), "");
        String title = checkValue(json.getString("title"), "注意");
        String button = checkValue(json.getString("button"), "NoButton");
        String dmid = checkValue(json.getString("dmid"), "");
        
        if (message.length() == 0 || title.length() == 0){
            return;
        }
        
        int nbutton = parseButtons(button);
        
        String result = "";
        
        switch(type){
            case "Critical":
                result = getButton(QXMessageBox.Critical(title,message,nbutton,QXMessageBox.NoButton));
            break;
            
            case "Question":
                result = getButton(QXMessageBox.Question(title,message,nbutton,QXMessageBox.NoButton));
            break;
            
            case "Information":
                result = getButton(QXMessageBox.Information(title,message,nbutton,QXMessageBox.NoButton));
            break;
            
            case "Warning":
                result = getButton(QXMessageBox.Warning(title,message,nbutton,QXMessageBox.NoButton));
            break;
            
            case "Input":
            { 
                String defaultValue = json.getString("value");
                
                result = InputDialog.requestInputDlg(new InputDialog.onInputListener() {
                    bool onInputOk(String text)override {
                        return true;
                    }
                    bool onInputCancel()override {
                        return true;
                    }
                    String getTitle()override {
                        return title;
                    }
                    String getTips()override {
                        return message;
                    }
                    String getDefault()override {
                        return defaultValue;
                    }
                });
            }
            break;
            
            case "List":
            { 
                JsonArray array = (JsonArray)json.get("list");
                String defval  = json.getString("value");
                
                String [] lists = new String[array.length()];
                
                for (int i = 0; i < array.length(); i++){
                    lists[i] = array.getString(i);
                }
                
                result = "" + MultiSelectDialog.requestSelect(new InputDialog.onInputListener(){
                        bool onInputOk(String text)override{ return true;}
                        bool onInputCancel()override{ return true;}
                        bool onSelectOk(int id){
                            return true;
                        }
                        String getTitle()override{return title;}
                        String getTips()override{return message;}
                        String getDefault()override{
                            return defval;
                        }
                    },lists);
            }
            break;
        }
        
        if (dmid.length() > 0){
            JsonObject reply = new JsonObject();
            
            reply.put("dmid", dmid);
            reply.put("result", result);
            
            byte [] content = reply.toString(true).getBytes();
            
            sendCommand(MessageBoxReply, 0, content, content.length);
        }
    }
    
    public void onLoadModule(JsonObject json){
		String module = json.getString("module");
        bool bSymbol = json.getBool("symbol");
        
        XWndOutput.Output(module + (bSymbol ? " 已加载调试信息.\n" : " 未找到调试信息.\n"), 1);
        
		BreakPointWnd.SendBreakPoint();
        sendCommand(ModuleLoaded, 0, new byte[0], 0);
    }
    
    public void onQueryByName(JsonObject json){
    
		String qid = json.getString("queryid");
        
        if (qid != nilptr && qid.length() > 0){
        
			long qnid = qid.parseLong();
            
			synchronized(threadObject){
            
				QueryThread qt = nilptr;
                
				try{
					qt = threadObject.get(qnid);
				}catch(Exception e){
                
                }
                
                if (qt != nilptr){
					synchronized(qt){
						qt.object = json;
						qt.notify();
                    }
                }
			}
        }

    }
    
    public void onDumpObjects(JsonObject json){
		XWndObjectDump.sendInfo(json);
    }
    public void queryMemory(){
		sendCommand(QueryMemoryInfo, 0, new byte[0], 0);
    }
    
    public void requestGc(){
		sendCommand(GC, 0, new byte[0], 0);
    }
    
    public void stepover(long tid){
		XStackInfor.clearBreak(tid);
		sendCommand(StepOver, tid, new byte[0], 0);
        
    }
    
    public void debugActive(){
		sendCommand(Active, 0, new byte[0], 0);
    }
    
    public void stepout(long tid){
		XStackInfor.clearBreak(tid);
		sendCommand(StepOut, tid, new byte[0], 0);
    }
    
    public void sendCommand(int cmd, long tid, byte[] data, int length){
		int buf_size = 16 + length;
		byte [] buffer = new byte[buf_size];

		buffer[0] = 0xff;
		buffer[1] = 0xfe;
		buffer[2] = (byte)(cmd & 0xff);
		buffer[3] = (byte)((cmd >> 8) & 0xff);

		buffer[4] = (byte)(tid & 0xff);
		buffer[5] = (byte)((tid >> 8) & 0xff);
		buffer[6] = (byte)((tid >> 16) & 0xff);
		buffer[7] = (byte)((tid >> 24) & 0xff);
        buffer[8] = (byte)((tid >> 32) & 0xff);
        buffer[9] = (byte)((tid >> 40) & 0xff);
        buffer[10] = (byte)((tid >> 48) & 0xff);
        buffer[11] = (byte)((tid >> 56) & 0xff);
            
		buffer[12] = (byte)(length & 0xff);
		buffer[13] = (byte)((length >> 8) & 0xff);
		buffer[14] = (byte)((length >> 16) & 0xff);
		buffer[15] = (byte)((length >> 24) & 0xff);

		_system_.arrayCopy(data, 0, buffer, 16, length);
                
        new Thread(){
			void run()override{
				synchronized(pipeLock){
					if (_pipe != nilptr){
						_pipe.write(buffer, 0, buf_size); 
					}
				}
            }
        }.start();
	}  
            
    public void debug(){
        byte [] buffer = new byte[1024];
        int length = 0;
        int rd = 0;
        
        Stream _readport = _pipe;
        
        if (_readport != nilptr){
			do{
                
				byte [] data = new byte[1024];
				
                 
				rd = _readport.read(data, 0, 1024);
				
			
				if (rd > 0){
					if (length + rd > buffer.length){
						byte [] new_buf = new byte[(length + rd) * 2];
						_system_.arrayCopy(buffer, 0, new_buf, 0, length);
						buffer = new_buf;
					}
					
					_system_.arrayCopy(data, 0, buffer, length, rd);
					length += rd;
					XRegular.Result result = nilptr;
				 
					while(nilptr != (result = XRegular.Match(buffer, 0, length, "[FFFE]{c:LEBB}<len:2>{t:LEBB}<len:8>{l:LEBB}<len:4>*<len:l>"))){
						if (result != nilptr){
							int cmd = result.getValue('c');
							long tid = result.getValue('t');
							int conlen = result.getValue('l');
							
							JsonObject json;
							
							try{
								json = new JsonObject(new String(buffer, 16, conlen));
							}catch(Exception e){
								_system_.consoleWrite("XDebuggee 181 Exception :" + e.getMessage());
							}
							
							if (json == nilptr){
								json = new JsonObject();
							}

							if (analyzeCommand(cmd, tid, json) == false){
                                break;
                            }
							int al = result.getRegularLength();
							if (al > 0){
								length -= al;
								if (length > 0){
									for (int i = 0, c = length;i < c; i++){
										buffer[i] = buffer[i + al];
									}
								}
							}
						}
					}
				}else{
					break;
				}
                
			}while (rd > 0);
			
			synchronized(pipeLock){
				_pipe = nilptr;
			}
            
        }
    }
    
    public void onInterrupt(long tid, JsonObject json){
        ThreadManager.Update(json, tid == 0);
    }
    
    public void setThreadStatus(int tid, bool interrupt){
		synchronized(threadStatus){
			threadStatus.put(tid, interrupt);
        }
        updateMenu(tid);
    }
    
    public void updateMenu(int thread){
		bool bInterrupt = false;
		synchronized(threadStatus){
			Map.Iterator<int,bool> item = threadStatus.find(thread);
			if (item != nilptr){
				bInterrupt = item.getValue();
			}
		}
        XWorkspace.workspace.refreshDebugControl(bInterrupt);
    }
    
    public void toggleBreakpoint(String file, int line, bool add){
		JsonObject json = new JsonObject();
        json.put("file", file);
        json.put("line", line);
        json.put("set", add ? 1 : 0);
        String content = json.toString(false);
        byte [] data = content.getBytes();
        sendCommand(SetBreakPoint, 0, data, data.length);
    }
    
    public void onSetBreakPoint(JsonObject json){
		String file = json.getString("file");
        int reqline = json.getInt("reqline");
        int realine = json.getInt("realine");
        int set = json.getInt("set");
        int error = json.getInt("error");
        BreakPointWnd.setBreakPoint(file, reqline, realine, set != 0, error);
    }
    
    public void onQueryFrame(long tid, JsonObject json){
		AutoWnd.setFrameInfo(tid, json);
    }
    public bool analyzeCommand(int cmd, long tid, JsonObject json){
		switch(cmd){
			case Unknow:
            
            break;
            
			case Interrupt :
            onInterrupt(tid, json);
            break;
            
			case Continue:
            
            break;
            
			case StepIn:
            
            break;
            
			case StepOver:
            
            break;
            
			case StepOut :
            
            break;
            
			case SetBreakPoint:
				onSetBreakPoint(json);
            break;
            
			case SetMemoryBreakPoint:
            
            break;
            
			case SetFunctionBreakPoint:
            
            break;
            
			case QueryStackStruct:
            
            break;
            
			case QueryStackObject:
            
            break;
            
			case QueryStackObjectDetails:
            
            break;
            
			case QueryHeapStruct:
            
            break;
            
			case QueryHeapObject:
            
            break;
            
			case QueryHeapObjectDetails:
            
            break;
            
			case QueryThreadCount:
            
            break;
            
			case QueryStackFrame:
            
            break;
            
			case SwitchThread:
            
            break;
            
			case QueryFrame:
				onQueryFrame(tid, json);
            break;
            
			case QueryMemoryInfo:
				XMemoryWnd.memoryWnd.showInfo(json);
            break;
            
			case GC:
            
            break;
            
            case Log:
				XLogcatWnd.sendLogcat(json);
            break;
            case WatchObject:
				//_system_.consoleWrite(json.toString(true));
                WatchWnd.watchesWnd.showInfo(json);
            break;
            case GCInfo:
            if (Setting.outputGCStat() == false){
                break;
            }
            case Debug:
				String message = json.getString("message");
				if (_system_.getPlatformId() == 0){
					byte [] data = message.getBytes();
                    try{
						message = new String(data, 0, data.length, "CP936");
                    }catch(Exception e){
						message = new String(data, 0, data.length);
                    }
				}
				XWndOutput.Output(message + "\n", 1);
            break;
            
            case Active:
				active();
            break;
            
            case QueryObject:
				onQueryObject(json);
            break;
            
            case GcDump:
				onDumpObjects(json);
            break;
            
            case QueryByName:
				onQueryByName(json);
            break;
            
            case ModuleLoaded:
				onLoadModule(json);
            break;
            
            case LookupMemory:
				onLookupMemory(json);
            break;
            
            case DumpMemory:
				onDumpMemory(json);
            break;
            
            case MessageBox:
                onMessageBox(json);
            break;
            
            default:
            case DBGExit:
                return false;
            break;
            
        }
        return true;
    }
};