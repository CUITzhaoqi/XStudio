
class QXPropertyBrowser : QXWidget{
    
    public static class PropertyManager : QXObject{
		
        Map<long, onPropertyEventListener> eventListener 
			= new Map<long, onPropertyEventListener>();
        
		public static class onPropertyEventListener{
			 public void onEnumPropertyValueChanged(long prop, int item){
				
			 }
			 public void onVariantPropertyValueChanged(long prop, int dataType, String stringValue){
				
			 }
			 public void onVariantPropertyAttributeChanged(long prop,String strAttributr, int dataType, String stringValue){
				
			 }
        };
        
        public PropertyManager(){
        
        }
        
        public PropertyManager(long handle){
            super(handle);
        }
        
        public void onEnumPropertyValueChanged(long prop, int item)override{
			Map.Iterator<long, onPropertyEventListener> _listener = eventListener.find(prop);
            if (_listener != nilptr){
				_listener.getValue().onEnumPropertyValueChanged(prop, item);
            }
		}
        
		public void onVariantPropertyValueChanged(long prop, int dataType, String stringValue)override{
			Map.Iterator<long, onPropertyEventListener> _listener = eventListener.find(prop);
            if (_listener != nilptr){
				_listener.getValue().onVariantPropertyValueChanged(prop, dataType, stringValue);
            }
		}
        
		public void onVariantPropertyAttributeChanged(long prop,String strAttributr, int dataType, String stringValue)override{
			Map.Iterator<long, onPropertyEventListener> _listener = eventListener.find(prop);
            if (_listener != nilptr){
				_listener.getValue().onVariantPropertyAttributeChanged(prop, strAttributr, dataType, stringValue);
            }
		}
        
        public void setPropertyEventListener(QtProperty prop, onPropertyEventListener l){
			if (l == nilptr){
				eventListener.remove(prop.nativehandle);
            }else{
				eventListener.put(prop.nativehandle, l);
            }
        }
    };
    
    static class QtBoolPropertyManager : PropertyManager{
        public QtBoolPropertyManager(long handle){
            super(handle);
        }
        public QtBoolPropertyManager(){
                nativehandle = createQObject(QType.qtBoolPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
        public QtBoolPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtBoolPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
    };
    
    
    public static class QtColorPropertyManager : PropertyManager{
        public QtColorPropertyManager(long handle){
            super(handle);
        }
        public QtColorPropertyManager(){
                nativehandle = createQObject(QType.qtColorPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
        public QtColorPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtColorPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
    };
    
    
    public static class QtDatePropertyManager : PropertyManager{
        public QtDatePropertyManager(long handle){
            super(handle);
        }
        public QtDatePropertyManager(){
                nativehandle = createQObject(QType.qtDatePropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
        public QtDatePropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtDatePropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
    };
    
    
    public static class QtDateTimePropertyManager : PropertyManager {
        public QtDateTimePropertyManager(long handle){
            super(handle);
        }
        public QtDateTimePropertyManager(){
                nativehandle = createQObject(QType.qtDateTimePropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
        public QtDateTimePropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtDateTimePropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
    };
    
    
    public static class QtDoublePropertyManager  : PropertyManager{
        public QtDoublePropertyManager(long handle){
            super(handle);
        }
        public QtDoublePropertyManager(){
                nativehandle = createQObject(QType.qtDoublePropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
        public QtDoublePropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtDoublePropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtBoolPropertyManager");
            }
        }
    };
    
    
    public static class QtEnumPropertyManager : PropertyManager {
        public QtEnumPropertyManager(long handle){
            super(handle);
        }
        public QtEnumPropertyManager(){
                nativehandle = createQObject(QType.qtEnumPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtEnumPropertyManager");
            }
        }
        public QtEnumPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtEnumPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtEnumPropertyManager");
            }
        }
        
        public void setValues(QtProperty item, String [] values){
            widget_set_long_object_value(nativehandle, this.PROPSETENUM, item.nativehandle, values);
        }
        
        public int getValue(QtProperty item){
            return core_getintlong(nativehandle, this.PEORENUMVALUE, item.nativehandle);
        }
    };
    
    
    public static class QtFlagPropertyManager : PropertyManager {
        public QtFlagPropertyManager(long handle){
            super(handle);
        }
        public QtFlagPropertyManager(){
                nativehandle = createQObject(QType.qtFlagPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtFlagPropertyManager");
            }
        }
        public QtFlagPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtFlagPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtFlagPropertyManager");
            }
        }
    };
    
    
    public static class QtFontPropertyManager : PropertyManager {
        public QtFontPropertyManager(long handle){
            super(handle);
        }
        public QtFontPropertyManager(){
                nativehandle = createQObject(QType.qtFontPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtFontPropertyManager");
            }
        }
        public QtFontPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtFontPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtFontPropertyManager");
            }
        }
    };
    
    
    public static class QtGroupPropertyManager  : PropertyManager{
        public QtGroupPropertyManager(long handle){
            super(handle);
        }
        public QtGroupPropertyManager(){
                nativehandle = createQObject(QType.qtGroupPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtGroupPropertyManager");
            }
        }
        public QtGroupPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtGroupPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtGroupPropertyManager");
            }
        }
    };
    
    
    public static class QtIntPropertyManager  : PropertyManager{
        public QtIntPropertyManager(long handle){
            super(handle);
        }
        public QtIntPropertyManager(){
                nativehandle = createQObject(QType.qtIntPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtIntPropertyManager");
            }
        }
        public QtIntPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtIntPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtIntPropertyManager");
            }
        }
    };
    
    
    public static class QtPointPropertyManager  : PropertyManager{
        public QtPointPropertyManager(long handle){
            super(handle);
        }
        public QtPointPropertyManager(){
                nativehandle = createQObject(QType.qtPointPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtPointPropertyManager");
            }
        }
        public QtPointPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtPointPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtPointPropertyManager");
            }
        }
    };
    
    
    public static class QtRectPropertyManager   : PropertyManager   {
        public QtRectPropertyManager(long handle){
            super(handle);
        }
        public QtRectPropertyManager(){
                nativehandle = createQObject(QType.qtRectPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtRectPropertyManager");
            }
        }
        public QtRectPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtRectPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtRectPropertyManager");
            }
        }
    };
    
    
    public static class QtSizePropertyManager   : PropertyManager   {
        public QtSizePropertyManager(long handle){
            super(handle);
        }
        public QtSizePropertyManager(){
                nativehandle = createQObject(QType.qtSizePropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtSizePropertyManager");
            }
        }
        public QtSizePropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtSizePropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtSizePropertyManager");
            }
        }
    };
    
    
    public static class QtSizePolicyPropertyManager    : PropertyManager  {
        public QtSizePolicyPropertyManager(long handle){
            super(handle);
        }
        public QtSizePolicyPropertyManager(){
                nativehandle = createQObject(QType.qtSizePolicyPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtSizePolicyPropertyManager");
            }
        }
        public QtSizePolicyPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtSizePolicyPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtSizePolicyPropertyManager");
            }
        }
    };
    
    
    public static class QtStringPropertyManager   : PropertyManager  {
        public QtStringPropertyManager(long handle){
            super(handle);
        }
        public QtStringPropertyManager(){
                nativehandle = createQObject(QType.qtStringPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtStringPropertyManager");
            }
        }
        public QtStringPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtStringPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtStringPropertyManager");
            }
        }
    };
    
    
    public static class QtTimePropertyManager   : PropertyManager  {
        public QtTimePropertyManager(long handle){
            super(handle);
        }
        public QtTimePropertyManager(){
                nativehandle = createQObject(QType.qtTimePropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtTimePropertyManager");
            }
        }
        public QtTimePropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtTimePropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtTimePropertyManager");
            }
        }
    };
    
    
    public static class QtVariantPropertyManager : PropertyManager{
        public QtVariantPropertyManager(long handle){
            super(handle);
        }
        public QtVariantPropertyManager(){
                nativehandle = createQObject(QType.qtVariantPropertyManager, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtVariantPropertyManager");
            }
        }
        public QtVariantPropertyManager(QXObject parent){
            nativehandle = createQObject(QType.qtVariantPropertyManager, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object QtVariantPropertyManager");
            }
        }
        public QtProperty addProperty(QtProperty obj,int type, String text){
            obj.nativehandle = long_intstring(nativehandle, this.PROPADDPROPERTY, type, text);
            return obj;
        }
        public QtProperty addPropertyGroup(QtProperty obj, String text){
            obj.nativehandle = long_intstring(nativehandle, this.PROPADDPROPERTYGROUP, 0, text);
            return obj;
        }
        public QtProperty addEnumProperty(QtProperty obj,String text){
            obj.nativehandle = long_intstring(nativehandle, this.PROPADDPROPERTYENUM, 0, text);
            return obj;
        }
        public QtProperty addFlagProperty(QtProperty obj,String text){
            obj.nativehandle = long_intstring(nativehandle, this.PROPADDPROPERTYFLAG, 0, text);
            return obj;
        }
    };
    
    public static class QtProperty: QXCore{
        Object _tag;
        
        public void setTagObject(Object f){ _tag = f;}
        public Object getTagObject(){return _tag;}
        
        public QtProperty(){
        }
        public QtProperty(long handle){
            nativehandle = handle;
        }
        public void addSubProperty(QtProperty prop){
            widget_set_native_value(nativehandle, this.ADDSUBPROPERTY, prop.nativehandle);
        }
    };
    
    public static class QtVariantProperty : QtProperty{
        int flags = 0;
        public void setFlags(int f){ flags = f;}
        public int getFlags(){return flags;}
        public QtVariantProperty(){
        }
        public QtVariantProperty(long handle){
            nativehandle = handle;
        }
        public void setAttributeEchoMode(int Value){
            widget_set_object_value(nativehandle, this.PROPATTRECHOM, Value);
        }
        public void setAttributeRegex(String Value){
            widget_set_object_value(nativehandle, this.PROPATTRREGEX, Value);
        }
        public void setAttributeMax(int Value){
            widget_set_object_value(nativehandle, this.PROPATTRMAXIM, Value);
        }
        public void setAttributeMax(double Value){
            widget_set_object_value(nativehandle, this.PROPATTRMAXIM, Value);
        }        
        public void setAttributeMin(int Value){
            widget_set_object_value(nativehandle, this.PROPATTRMINIM, Value);
        }
        public void setAttributeMin(double Value){
            widget_set_object_value(nativehandle, this.PROPATTRMINIM, Value);
        }           
        public void setAttributeEnumNames(String[] Value){
            widget_set_object_value(nativehandle, this.PROPATTRENUMN, Value);
        }
        public void setAttributeFlagNames(String[] Value){
            widget_set_object_value(nativehandle, this.PROPATTRFLAGN, Value);
        }
        public void setAttributeSingleStep(int Value){
            widget_set_object_value(nativehandle, this.PROPATTRSSTEP, Value);
        }
        public void setAttributeSingleStep(double Value){
            widget_set_object_value(nativehandle, this.PROPATTRSSTEP, Value);
        }
        public void setAttributeDecimals(int Value){
            widget_set_object_value(nativehandle, this.PROPATTRSSTEP, Value);
        }
        public void setValue(int Value){
            widget_set_object_value(nativehandle, this.PROPSETVALUE, Value);
        }
        public void setValue(String Value){
            widget_set_object_value(nativehandle, this.PROPSETVALUE, Value);
        }
        public void setValue(bool Value){
            widget_set_object_value(nativehandle, this.PROPSETVALUE, Value);
        }
        public void setValue(double Value){
            widget_set_object_value(nativehandle, this.PROPSETVALUE, Value);
        }
        public void setAttributePointMax(double x, double y){
            native_double2(nativehandle, this.PROPSETARRTPTMAX, x, y);
        }
        public void setAttributePointMin(double x, double y){
            native_double2(nativehandle, this.PROPSETARRTPTMIN, x, y);
        }
        public void setValuePoint(double x, double y){
            native_double2(nativehandle, this.PROPSETVALUEPT, x, y);
        }
        public  String getValue(){
            return (String)core_getString(nativehandle, this.PROPGETVALUE);
        }
        public  void setAttributeSizeMax(double cx, double cy){
            native_double2(nativehandle, this.PROPSETARRTSZMAX, cx, cy);
        }
        public void setAttributeSizeMin(double cx, double cy){
            native_double2(nativehandle, this.PROPSETARRTSZMIN, cx, cy);
        }
        public void setValueSize(double cx, double cy){
            native_double2(nativehandle, this.PROPSETVALUESZ, cx, cy);
        }
        public void setAttributeRect(double l, double t, double r, double b){
            native_double4(l, t, r, b, nativehandle, this.PROPSETARRTRC);
        }
        public void setValueRect(double l, double t, double r, double b){
            native_double4(l, t, r, b, nativehandle, this.PROPSETVALUERC);
        }
    };
    
    public static class QtBrowserItem: QXCore{
        public QtBrowserItem(){
        }
        public QtBrowserItem(long handle){
            nativehandle = handle;
        }
    };
    
    public static class QtVariantEditorFactory : QXObject{
        public QtVariantEditorFactory(long handle){
            super(handle);
        }
        public QtVariantEditorFactory(){
                nativehandle = createQObject(QType.qtVariantEditorFactory, this, 0);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object qtVariantEditorFactory");
            }
        }
        public QtVariantEditorFactory(QXObject parent){
            nativehandle = createQObject(QType.qtVariantEditorFactory, this, parent.nativehandle);
            if (nativehandle == 0){
                throw new IllegalArgumentException("can't create Object qtVariantEditorFactory");
            }
        }
    };
    
    public bool create(){
        nativehandle = createQObject(QType.qtPropertyBrowser, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    
    public bool create(QXWidget parent){
        nativehandle = createQObject(QType.qtPropertyBrowser, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    
    public QtBrowserItem addProperty(QtProperty pitem){
        return new QtBrowserItem(long_intlong(nativehandle, ADDPROPERTY, pitem.nativehandle));
    }
    public void setFactoryForManager(PropertyManager mgr, QtVariantEditorFactory factory){
        void_long2(nativehandle, SETMGRFACTORY, mgr.nativehandle, factory.nativehandle);
    }
    
    public void setPropertiesWithoutValueMarked(bool b){
        widget_set_bool_value(nativehandle, SPWVM, b);
    }
    
    public void setLables(String left, String right){
		long_string2(nativehandle, QPBSETLABELS, left, right);
    }
    public void setHeaderWidths(int left, int right){
		widget_set_v2int_value(nativehandle, SETPROPWIDTHS, left, right);
    }
    public void enableAdjust(bool ba){
		widget_set_bool_value(nativehandle, QPBADJUST, ba);
    }
    public void setRootIsDecorated(bool b){
        widget_set_bool_value(nativehandle, SRID, b);
    }
    public void setItemExpand(QtBrowserItem item, bool bp){
        object_get_long_int(nativehandle, QPB_SETEXPAND, item.nativehandle, bp ? 1 : 0);
    }
    public void setItemSelected(QtBrowserItem item, bool bp){
        object_get_long_int(nativehandle, QPB_SETSELECT, item.nativehandle, bp ? 1 : 0);
    }
    public void setItemVisible(QtBrowserItem item, bool bp){
        object_get_long_int(nativehandle, QPB_SETVISIBLE, item.nativehandle, bp ? 1 : 0);
    }
    public void setItemBackColor(QtBrowserItem item, int color){
        object_get_long_int(nativehandle, QPB_SETBACKCOLOR, item.nativehandle, color);
    }
    public void clear(){
        widget_get_bool_value(nativehandle, TREEPROPCLEAR);
    }
};