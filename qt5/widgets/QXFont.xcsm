class QXFont : QXCore{
   public  QXFont(String fontName){
        nativehandle = createNObject(QType.qtFont, 0);
        if (nativehandle == 0){
			throw new IllegalArgumentException("can not new QXPath");
        }
        widget_slot_string(nativehandle, FONTSETFAMILY, fontName);
    }
    
   public  static QXFont loadFromString(String string){
		long h = long_string2(0, LOADFONTDESCRIPTION, string, nilptr);
        if (h != 0){
			return new QXFont(h);
        }
        
        return nilptr;
    }
    
    public static QXFont loadFromFile(String file, String subName){
		long h = long_string2(0, LOADFONT, file, subName);
        if (h != 0){
			return new QXFont(h);
        }
        
        return nilptr;
    }
     
    public QXFont(String fontName, int size, bool ptsize){
        nativehandle = createNObject(QType.qtFont, 0);
        widget_slot_string(nativehandle, FONTSETFAMILY, fontName);
        if (ptsize){
            widget_set_vint_value(nativehandle, FONTPTSIZE, size);
        }else{
            widget_set_vint_value(nativehandle, FONTPXSIZE, size);
        }
    }
    
    public QXFont(long handle){
		nativehandle = handle; 
    }
    
    public QXFont(){
        nativehandle = createNObject(QType.qtFont, 0);
    }
	public int ascent(){
		return QXNative.widget_get_int_value(nativehandle, QXCore.FONTASCENT);
    }
   public  int descent(){
		return QXNative.widget_get_int_value(nativehandle, QXCore.FONTDESCENT);
    }
   public  void setFont(String fontName){
        widget_slot_string(nativehandle, FONTSETFAMILY, fontName);
    }
    
   public  void setPointSize(int ptSize){
        widget_set_vint_value(nativehandle, FONTPTSIZE, ptSize);
    }
    
   public  void setPixelSize(int pxSize){
        widget_set_vint_value(nativehandle, FONTPXSIZE, pxSize);
    }
    
  public   void finalize(){
        widget_slot(nativehandle, FONTCTOR);
    }
    
   public  String familyName(){
		return (String)core_getString(nativehandle, GETFONTNAME);
    }
    
    public int pointSize(){
		return widget_get_int_value(nativehandle, GETFONTPTSIZE);
    }
    
   public  int pixelSize(){
		return widget_get_int_value(nativehandle, GETFONTPIXELSIZE);
    }
    
   public  QXRect measure(String text){
		QXRect qr = new QXRect();
		long v = long_longstring(nativehandle, MEASURETEXT, 0, text);
        qr.left = qr.top = 0;
        qr.right = (v >> 32) & 0xffffffff;
        qr.bottom = v & 0xffffffff;
        return qr;
    }
};