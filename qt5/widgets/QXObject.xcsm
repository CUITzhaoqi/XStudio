
class QXObject : QXCore {
    public static const int
    ElideLeft = 0,
    ElideRight = 1,
    ElideMiddle = 2,
    ElideNone = 3;

    public static const int
    ArrowCursor = 0,
    UpArrowCursor = 1,
    CrossCursor = 2,
    WaitCursor = 3,
    IBeamCursor = 4,
    SizeVerCursor = 5,
    SizeHorCursor = 6,
    SizeBDiagCursor = 7,
    SizeFDiagCursor = 8,
    SizeAllCursor = 9,
    BlankCursor = 10,
    SplitVCursor = 11,
    SplitHCursor = 12,
    PointingHandCursor = 13,
    ForbiddenCursor = 14,
    WhatsThisCursor = 15,
    BusyCursor = 16,
    OpenHandCursor = 17,
    ClosedHandCursor = 18,
    DragCopyCursor = 19,
    DragMoveCursor = 20,
    DragLinkCursor = 21,
    LastCursor = DragLinkCursor,
    BitmapCursor = 24,
    CustomCursor = 25;

    public static const int
    Key_Escape = 0x01000000,                // misc keys
    Key_Tab = 0x01000001,
    Key_Backtab = 0x01000002,
    Key_Backspace = 0x01000003,
    Key_Return = 0x01000004,
    Key_Enter = 0x01000005,
    Key_Insert = 0x01000006,
    Key_Delete = 0x01000007,
    Key_Pause = 0x01000008,
    Key_Print = 0x01000009,               // print screen
    Key_SysReq = 0x0100000a,
    Key_Clear = 0x0100000b,
    Key_Home = 0x01000010,                // cursor movement
    Key_End = 0x01000011,
    Key_Left = 0x01000012,
    Key_Up = 0x01000013,
    Key_Right = 0x01000014,
    Key_Down = 0x01000015,
    Key_PageUp = 0x01000016,
    Key_PageDown = 0x01000017,
    Key_Shift = 0x01000020,                // modifiers
    Key_Control = 0x01000021,
    Key_Meta = 0x01000022,
    Key_Alt = 0x01000023,
    Key_CapsLock = 0x01000024,
    Key_NumLock = 0x01000025,
    Key_ScrollLock = 0x01000026,
    Key_F1 = 0x01000030,                // function keys
    Key_F2 = 0x01000031,
    Key_F3 = 0x01000032,
    Key_F4 = 0x01000033,
    Key_F5 = 0x01000034,
    Key_F6 = 0x01000035,
    Key_F7 = 0x01000036,
    Key_F8 = 0x01000037,
    Key_F9 = 0x01000038,
    Key_F10 = 0x01000039,
    Key_F11 = 0x0100003a,
    Key_F12 = 0x0100003b,
    Key_F13 = 0x0100003c,
    Key_F14 = 0x0100003d,
    Key_F15 = 0x0100003e,
    Key_F16 = 0x0100003f,
    Key_F17 = 0x01000040,
    Key_F18 = 0x01000041,
    Key_F19 = 0x01000042,
    Key_F20 = 0x01000043,
    Key_F21 = 0x01000044,
    Key_F22 = 0x01000045,
    Key_F23 = 0x01000046,
    Key_F24 = 0x01000047,
    Key_F25 = 0x01000048,                // F25 .. F35 only on X11
    Key_F26 = 0x01000049,
    Key_F27 = 0x0100004a,
    Key_F28 = 0x0100004b,
    Key_F29 = 0x0100004c,
    Key_F30 = 0x0100004d,
    Key_F31 = 0x0100004e,
    Key_F32 = 0x0100004f,
    Key_F33 = 0x01000050,
    Key_F34 = 0x01000051,
    Key_F35 = 0x01000052,
    Key_Super_L = 0x01000053,                 // extra keys
    Key_Super_R = 0x01000054,
    Key_Menu = 0x01000055,
    Key_Hyper_L = 0x01000056,
    Key_Hyper_R = 0x01000057,
    Key_Help = 0x01000058,
    Key_Direction_L = 0x01000059,
    Key_Direction_R = 0x01000060,
    Key_Space = 0x20,                // 7 bit printable ASCII
    Key_Any = Key_Space,
    Key_Exclam = 0x21,
    Key_QuoteDbl = 0x22,
    Key_NumberSign = 0x23,
    Key_Dollar = 0x24,
    Key_Percent = 0x25,
    Key_Ampersand = 0x26,
    Key_Apostrophe = 0x27,
    Key_ParenLeft = 0x28,
    Key_ParenRight = 0x29,
    Key_Asterisk = 0x2a,
    Key_Plus = 0x2b,
    Key_Comma = 0x2c,
    Key_Minus = 0x2d,
    Key_Period = 0x2e,
    Key_Slash = 0x2f,
    Key_0 = 0x30,
    Key_1 = 0x31,
    Key_2 = 0x32,
    Key_3 = 0x33,
    Key_4 = 0x34,
    Key_5 = 0x35,
    Key_6 = 0x36,
    Key_7 = 0x37,
    Key_8 = 0x38,
    Key_9 = 0x39,
    Key_Colon = 0x3a,
    Key_Semicolon = 0x3b,
    Key_Less = 0x3c,
    Key_Equal = 0x3d,
    Key_Greater = 0x3e,
    Key_Question = 0x3f,
    Key_At = 0x40,
    Key_A = 0x41,
    Key_B = 0x42,
    Key_C = 0x43,
    Key_D = 0x44,
    Key_E = 0x45,
    Key_F = 0x46,
    Key_G = 0x47,
    Key_H = 0x48,
    Key_I = 0x49,
    Key_J = 0x4a,
    Key_K = 0x4b,
    Key_L = 0x4c,
    Key_M = 0x4d,
    Key_N = 0x4e,
    Key_O = 0x4f,
    Key_P = 0x50,
    Key_Q = 0x51,
    Key_R = 0x52,
    Key_S = 0x53,
    Key_T = 0x54,
    Key_U = 0x55,
    Key_V = 0x56,
    Key_W = 0x57,
    Key_X = 0x58,
    Key_Y = 0x59,
    Key_Z = 0x5a,
    Key_BracketLeft = 0x5b,
    Key_Backslash = 0x5c,
    Key_BracketRight = 0x5d,
    Key_AsciiCircum = 0x5e,
    Key_Underscore = 0x5f,
    Key_QuoteLeft = 0x60,
    Key_BraceLeft = 0x7b,
    Key_Bar = 0x7c,
    Key_BraceRight = 0x7d,
    Key_AsciiTilde = 0x7e,
    Key_nobreakspace = 0x0a0,
    Key_exclamdown = 0x0a1,
    Key_cent = 0x0a2,
    Key_sterling = 0x0a3,
    Key_currency = 0x0a4,
    Key_yen = 0x0a5,
    Key_brokenbar = 0x0a6,
    Key_section = 0x0a7,
    Key_diaeresis = 0x0a8,
    Key_copyright = 0x0a9,
    Key_ordfeminine = 0x0aa,
    Key_guillemotleft = 0x0ab,        // left angle quotation mark
    Key_notsign = 0x0ac,
    Key_hyphen = 0x0ad,
    Key_registered = 0x0ae,
    Key_macron = 0x0af,
    Key_degree = 0x0b0,
    Key_plusminus = 0x0b1,
    Key_twosuperior = 0x0b2,
    Key_threesuperior = 0x0b3,
    Key_acute = 0x0b4,
    Key_mu = 0x0b5,
    Key_paragraph = 0x0b6,
    Key_periodcentered = 0x0b7,
    Key_cedilla = 0x0b8,
    Key_onesuperior = 0x0b9,
    Key_masculine = 0x0ba,
    Key_guillemotright = 0x0bb,        // right angle quotation mark
    Key_onequarter = 0x0bc,
    Key_onehalf = 0x0bd,
    Key_threequarters = 0x0be,
    Key_questiondown = 0x0bf,
    Key_Agrave = 0x0c0,
    Key_Aacute = 0x0c1,
    Key_Acircumflex = 0x0c2,
    Key_Atilde = 0x0c3,
    Key_Adiaeresis = 0x0c4,
    Key_Aring = 0x0c5,
    Key_AE = 0x0c6,
    Key_Ccedilla = 0x0c7,
    Key_Egrave = 0x0c8,
    Key_Eacute = 0x0c9,
    Key_Ecircumflex = 0x0ca,
    Key_Ediaeresis = 0x0cb,
    Key_Igrave = 0x0cc,
    Key_Iacute = 0x0cd,
    Key_Icircumflex = 0x0ce,
    Key_Idiaeresis = 0x0cf,
    Key_ETH = 0x0d0,
    Key_Ntilde = 0x0d1,
    Key_Ograve = 0x0d2,
    Key_Oacute = 0x0d3,
    Key_Ocircumflex = 0x0d4,
    Key_Otilde = 0x0d5,
    Key_Odiaeresis = 0x0d6,
    Key_multiply = 0x0d7,
    Key_Ooblique = 0x0d8,
    Key_Ugrave = 0x0d9,
    Key_Uacute = 0x0da,
    Key_Ucircumflex = 0x0db,
    Key_Udiaeresis = 0x0dc,
    Key_Yacute = 0x0dd,
    Key_THORN = 0x0de,
    Key_ssharp = 0x0df,
    Key_division = 0x0f7,
    Key_ydiaeresis = 0x0ff,
    // International input method support (X keycode - 0xEE00, the
    // definition follows Qt/Embedded 2.3.7) Only interesting if
    // you are writing your own input method
    // International & multi-key character composition
    Key_AltGr               = 0x01001103,
    Key_Multi_key           = 0x01001120,  // Multi-key character compose
    Key_Codeinput           = 0x01001137,
    Key_SingleCandidate     = 0x0100113c,
    Key_MultipleCandidate   = 0x0100113d,
    Key_PreviousCandidate   = 0x0100113e,
    // Misc Functions
    Key_Mode_switch         = 0x0100117e,  // Character set switch
    //Key_script_switch       = 0x0100117e,  // Alias for mode_switch
    // Japanese keyboard support
    Key_Kanji               = 0x01001121,  // Kanji, Kanji convert
    Key_Muhenkan            = 0x01001122,  // Cancel Conversion
    //Key_Henkan_Mode         = 0x01001123,  // Start/Stop Conversion
    Key_Henkan              = 0x01001123,  // Alias for Henkan_Mode
    Key_Romaji              = 0x01001124,  // to Romaji
    Key_Hiragana            = 0x01001125,  // to Hiragana
    Key_Katakana            = 0x01001126,  // to Katakana
    Key_Hiragana_Katakana   = 0x01001127,  // Hiragana/Katakana toggle
    Key_Zenkaku             = 0x01001128,  // to Zenkaku
    Key_Hankaku             = 0x01001129,  // to Hankaku
    Key_Zenkaku_Hankaku     = 0x0100112a,  // Zenkaku/Hankaku toggle
    Key_Touroku             = 0x0100112b,  // Add to Dictionary
    Key_Massyo              = 0x0100112c,  // Delete from Dictionary
    Key_Kana_Lock           = 0x0100112d,  // Kana Lock
    Key_Kana_Shift          = 0x0100112e,  // Kana Shift
    Key_Eisu_Shift          = 0x0100112f,  // Alphanumeric Shift
    Key_Eisu_toggle         = 0x01001130,  // Alphanumeric toggle
    //Key_Kanji_Bangou        = 0x01001137,  // Codeinput
    //Key_Zen_Koho            = 0x0100113d,  // Multiple/All Candidate(s)
    //Key_Mae_Koho            = 0x0100113e,  // Previous Candidate
    // Korean keyboard support
    //
    // In fact, many Korean users need only 2 keys, Key_Hangul and
    // Key_Hangul_Hanja. But rest of the keys are good for future.
    Key_Hangul              = 0x01001131,  // Hangul start/stop(toggle)
    Key_Hangul_Start        = 0x01001132,  // Hangul start
    Key_Hangul_End          = 0x01001133,  // Hangul end, English start
    Key_Hangul_Hanja        = 0x01001134,  // Start Hangul->Hanja Conversion
    Key_Hangul_Jamo         = 0x01001135,  // Hangul Jamo mode
    Key_Hangul_Romaja       = 0x01001136,  // Hangul Romaja mode
    //Key_Hangul_Codeinput    = 0x01001137,  // Hangul code input mode
    Key_Hangul_Jeonja       = 0x01001138,  // Jeonja mode
    Key_Hangul_Banja        = 0x01001139,  // Banja mode
    Key_Hangul_PreHanja     = 0x0100113a,  // Pre Hanja conversion
    Key_Hangul_PostHanja    = 0x0100113b,  // Post Hanja conversion
    //Key_Hangul_SingleCandidate   = 0x0100113c,  // Single candidate
    //Key_Hangul_MultipleCandidate = 0x0100113d,  // Multiple candidate
    //Key_Hangul_PreviousCandidate = 0x0100113e,  // Previous candidate
    Key_Hangul_Special      = 0x0100113f,  // Special symbols
    //Key_Hangul_switch       = 0x0100117e,  // Alias for mode_switch
    // dead keys (X keycode - 0xED00 to avoid the conflict)
    Key_Dead_Grave          = 0x01001250,
    Key_Dead_Acute          = 0x01001251,
    Key_Dead_Circumflex     = 0x01001252,
    Key_Dead_Tilde          = 0x01001253,
    Key_Dead_Macron         = 0x01001254,
    Key_Dead_Breve          = 0x01001255,
    Key_Dead_Abovedot       = 0x01001256,
    Key_Dead_Diaeresis      = 0x01001257,
    Key_Dead_Abovering      = 0x01001258,
    Key_Dead_Doubleacute    = 0x01001259,
    Key_Dead_Caron          = 0x0100125a,
    Key_Dead_Cedilla        = 0x0100125b,
    Key_Dead_Ogonek         = 0x0100125c,
    Key_Dead_Iota           = 0x0100125d,
    Key_Dead_Voiced_Sound   = 0x0100125e,
    Key_Dead_Semivoiced_Sound = 0x0100125f,
    Key_Dead_Belowdot       = 0x01001260,
    Key_Dead_Hook           = 0x01001261,
    Key_Dead_Horn           = 0x01001262,
    // multimedia/internet keys - ignored by default - see QKeyEvent c'tor
    Key_Back  = 0x01000061,
    Key_Forward  = 0x01000062,
    Key_Stop  = 0x01000063,
    Key_Refresh  = 0x01000064,
    Key_VolumeDown = 0x01000070,
    Key_VolumeMute  = 0x01000071,
    Key_VolumeUp = 0x01000072,
    Key_BassBoost = 0x01000073,
    Key_BassUp = 0x01000074,
    Key_BassDown = 0x01000075,
    Key_TrebleUp = 0x01000076,
    Key_TrebleDown = 0x01000077,
    Key_MediaPlay  = 0x01000080,
    Key_MediaStop  = 0x01000081,
    Key_MediaPrevious  = 0x01000082,
    Key_MediaNext  = 0x01000083,
    Key_MediaRecord = 0x01000084,
    Key_MediaPause = 0x1000085,
    Key_MediaTogglePlayPause = 0x1000086,
    Key_HomePage  = 0x01000090,
    Key_Favorites  = 0x01000091,
    Key_Search  = 0x01000092,
    Key_Standby = 0x01000093,
    Key_OpenUrl = 0x01000094,
    Key_LaunchMail  = 0x010000a0,
    Key_LaunchMedia = 0x010000a1,
    Key_Launch0  = 0x010000a2,
    Key_Launch1  = 0x010000a3,
    Key_Launch2  = 0x010000a4,
    Key_Launch3  = 0x010000a5,
    Key_Launch4  = 0x010000a6,
    Key_Launch5  = 0x010000a7,
    Key_Launch6  = 0x010000a8,
    Key_Launch7  = 0x010000a9,
    Key_Launch8  = 0x010000aa,
    Key_Launch9  = 0x010000ab,
    Key_LaunchA  = 0x010000ac,
    Key_LaunchB  = 0x010000ad,
    Key_LaunchC  = 0x010000ae,
    Key_LaunchD  = 0x010000af,
    Key_LaunchE  = 0x010000b0,
    Key_LaunchF  = 0x010000b1,
    Key_MonBrightnessUp = 0x010000b2,
    Key_MonBrightnessDown = 0x010000b3,
    Key_KeyboardLightOnOff = 0x010000b4,
    Key_KeyboardBrightnessUp = 0x010000b5,
    Key_KeyboardBrightnessDown = 0x010000b6,
    Key_PowerOff = 0x010000b7,
    Key_WakeUp = 0x010000b8,
    Key_Eject = 0x010000b9,
    Key_ScreenSaver = 0x010000ba,
    Key_WWW = 0x010000bb,
    Key_Memo = 0x010000bc,
    Key_LightBulb = 0x010000bd,
    Key_Shop = 0x010000be,
    Key_History = 0x010000bf,
    Key_AddFavorite = 0x010000c0,
    Key_HotLinks = 0x010000c1,
    Key_BrightnessAdjust = 0x010000c2,
    Key_Finance = 0x010000c3,
    Key_Community = 0x010000c4,
    Key_AudioRewind = 0x010000c5, // Media rewind
    Key_BackForward = 0x010000c6,
    Key_ApplicationLeft = 0x010000c7,
    Key_ApplicationRight = 0x010000c8,
    Key_Book = 0x010000c9,
    Key_CD = 0x010000ca,
    Key_Calculator = 0x010000cb,
    Key_ToDoList = 0x010000cc,
    Key_ClearGrab = 0x010000cd,
    Key_Close = 0x010000ce,
    Key_Copy = 0x010000cf,
    Key_Cut = 0x010000d0,
    Key_Display = 0x010000d1, // Output switch key
    Key_DOS = 0x010000d2,
    Key_Documents = 0x010000d3,
    Key_Excel = 0x010000d4,
    Key_Explorer = 0x010000d5,
    Key_Game = 0x010000d6,
    Key_Go = 0x010000d7,
    Key_iTouch = 0x010000d8,
    Key_LogOff = 0x010000d9,
    Key_Market = 0x010000da,
    Key_Meeting = 0x010000db,
    Key_MenuKB = 0x010000dc,
    Key_MenuPB = 0x010000dd,
    Key_MySites = 0x010000de,
    Key_News = 0x010000df,
    Key_OfficeHome = 0x010000e0,
    Key_Option = 0x010000e1,
    Key_Paste = 0x010000e2,
    Key_Phone = 0x010000e3,
    Key_Calendar = 0x010000e4,
    Key_Reply = 0x010000e5,
    Key_Reload = 0x010000e6,
    Key_RotateWindows = 0x010000e7,
    Key_RotationPB = 0x010000e8,
    Key_RotationKB = 0x010000e9,
    Key_Save = 0x010000ea,
    Key_Send = 0x010000eb,
    Key_Spell = 0x010000ec,
    Key_SplitScreen = 0x010000ed,
    Key_Support = 0x010000ee,
    Key_TaskPane = 0x010000ef,
    Key_Terminal = 0x010000f0,
    Key_Tools = 0x010000f1,
    Key_Travel = 0x010000f2,
    Key_Video = 0x010000f3,
    Key_Word = 0x010000f4,
    Key_Xfer = 0x010000f5,
    Key_ZoomIn = 0x010000f6,
    Key_ZoomOut = 0x010000f7,
    Key_Away = 0x010000f8,
    Key_Messenger = 0x010000f9,
    Key_WebCam = 0x010000fa,
    Key_MailForward = 0x010000fb,
    Key_Pictures = 0x010000fc,
    Key_Music = 0x010000fd,
    Key_Battery = 0x010000fe,
    Key_Bluetooth = 0x010000ff,
    Key_WLAN = 0x01000100,
    Key_UWB = 0x01000101,
    Key_AudioForward = 0x01000102, // Media fast-forward
    Key_AudioRepeat = 0x01000103, // Toggle repeat mode
    Key_AudioRandomPlay = 0x01000104, // Toggle shuffle mode
    Key_Subtitle = 0x01000105,
    Key_AudioCycleTrack = 0x01000106,
    Key_Time = 0x01000107,
    Key_Hibernate = 0x01000108,
    Key_View = 0x01000109,
    Key_TopMenu = 0x0100010a,
    Key_PowerDown = 0x0100010b,
    Key_Suspend = 0x0100010c,
    Key_ContrastAdjust = 0x0100010d,
    Key_LaunchG  = 0x0100010e,
    Key_LaunchH  = 0x0100010f,
    Key_TouchpadToggle = 0x01000110,
    Key_TouchpadOn = 0x01000111,
    Key_TouchpadOff = 0x01000112,
    Key_MicMute = 0x01000113,
    Key_Red = 0x01000114,
    Key_Green = 0x01000115,
    Key_Yellow = 0x01000116,
    Key_Blue = 0x01000117,
    Key_ChannelUp = 0x01000118,
    Key_ChannelDown = 0x01000119,
    Key_Guide    = 0x0100011a,
    Key_Info     = 0x0100011b,
    Key_Settings = 0x0100011c,
    Key_MicVolumeUp   = 0x0100011d,
    Key_MicVolumeDown = 0x0100011e,
    Key_New      = 0x01000120,
    Key_Open     = 0x01000121,
    Key_Find     = 0x01000122,
    Key_Undo     = 0x01000123,
    Key_Redo     = 0x01000124,
    Key_MediaLast = 0x0100ffff,
    // Keypad navigation keys
    Key_Select = 0x01010000,
    Key_Yes = 0x01010001,
    Key_No = 0x01010002,
    // Newer misc keys
    Key_Cancel  = 0x01020001,
    Key_Printer = 0x01020002,
    Key_Execute = 0x01020003,
    Key_Sleep   = 0x01020004,
    Key_Play    = 0x01020005, // Not the same as Key_MediaPlay
    Key_Zoom    = 0x01020006,
    //Key_Jisho   = 0x01020007, // IME: Dictionary key
    //Key_Oyayubi_Left = 0x01020008, // IME: Left Oyayubi key
    //Key_Oyayubi_Right = 0x01020009, // IME: Right Oyayubi key
    Key_Exit    = 0x0102000a,
    // Device keys
    Key_Context1 = 0x01100000,
    Key_Context2 = 0x01100001,
    Key_Context3 = 0x01100002,
    Key_Context4 = 0x01100003,
    Key_Call = 0x01100004,      // set absolute state to in a call (do not toggle state)
    Key_Hangup = 0x01100005,    // set absolute state to hang up (do not toggle state)
    Key_Flip = 0x01100006,
    Key_ToggleCallHangup = 0x01100007, // a toggle key for answering, or hanging up, based on current call state
    Key_VoiceDial = 0x01100008,
    Key_LastNumberRedial = 0x01100009,
    Key_Camera = 0x01100020,
    Key_CameraFocus = 0x01100021,
    Key_unknown = 0x01ffffff;

    public static const int 
        LeftButton       = 0x00000001,
        RightButton      = 0x00000002,
        MidButton        = 0x00000004, // ### Qt 6: remove me
        MiddleButton     = MidButton,
        BackButton       = 0x00000008,
        XButton1         = BackButton,
        ExtraButton1     = XButton1,
        ForwardButton    = 0x00000010,
        XButton2         = ForwardButton,
        ExtraButton2     = ForwardButton,
        TaskButton       = 0x00000020,
        ExtraButton3     = TaskButton,
        ExtraButton4     = 0x00000040,
        ExtraButton5     = 0x00000080,
        ExtraButton6     = 0x00000100,
        ExtraButton7     = 0x00000200,
        ExtraButton8     = 0x00000400,
        ExtraButton9     = 0x00000800,
        ExtraButton10    = 0x00001000,
        ExtraButton11    = 0x00002000,
        ExtraButton12    = 0x00004000,
        ExtraButton13    = 0x00008000,
        ExtraButton14    = 0x00010000,
        ExtraButton15    = 0x00020000,
        ExtraButton16    = 0x00040000,
        ExtraButton17    = 0x00080000,
        ExtraButton18    = 0x00100000,
        ExtraButton19    = 0x00200000,
        ExtraButton20    = 0x00400000,
        ExtraButton21    = 0x00800000,
        ExtraButton22    = 0x01000000,
        ExtraButton23    = 0x02000000,
        ExtraButton24    = 0x04000000,
        AllButtons       = 0x07ffffff,
        MaxMouseButton   = ExtraButton24,
        // 4 high-order bits remain available for future use (0x08000000 through 0x40000000).
        MouseButtonMask  = 0xffffffff;
    
    public static const int NoModifier           = 0x00000000,
                     ShiftModifier        = 0x02000000,
                     ControlModifier      = 0x04000000,
                     AltModifier          = 0x08000000,
                     MetaModifier         = 0x10000000,
                     KeypadModifier       = 0x20000000,
                     GroupSwitchModifier  = 0x40000000,
                     // Do not extend the mask to include 0x01000000
                     KeyboardModifierMask = 0xfe000000;

    public static const int Invalid = 0,
                     Bool = 1,
                     Int = 2,
                     UInt = 3,
                     LongLong = 4,
                     ULongLong = 5,
                     Double = 6,
                     Char = 7,
                     Map = 8,
                     List = 9,
                     String = 10,
                     StringList = 11,
                     ByteArray = 12,
                     BitArray = 13,
                     Date = 14,
                     Time = 15,
                     DateTime = 16,
                     Url = 17,
                     Locale = 18,
                     Rect = 19,
                     RectF = 20,
                     Size = 21,
                     SizeF = 22,
                     Line = 23,
                     LineF = 24,
                     Point = 25,
                     PointF = 26,
                     RegExp = 27,
                     RegularExpression = 44,
                     Hash = 28,
                     EasingCurve = 29,
                     Uuid = 30,
                     ModelIndex = 42,
                     PersistentModelIndex = 50,
                     LastCoreType = 51,

                     Font = 64,
                     Pixmap = 65,
                     Brush = 66,
                     Color = 67,
                     Palette = 68,
                     Image = 70,
                     Polygon = 71,
                     Region = 72,
                     Bitmap = 73,
                     Cursor = 74,
                     KeySequence = 75,
                     Pen = 76,
                     TextLength = 77,
                     TextFormat = 78,
                     Matrix = 79,
                     Transform = 80,
                     Matrix4x4 = 81,
                     Vector2D = 82,
                     Vector3D = 83,
                     Vector4D = 84,
                     Quaternion = 85,
                     PolygonF = 86,
                     Icon = 69,
                     LastGuiType = 86,

                     SizePolicy = 121,

                     UserType = 1024,
                     LastType = -1; // need this so that gcc >= 3.4 allocates 32 bits for Type

    public static class onMouseEventListener {
        public void onMouseButtonPress(QXObject obj, int Button, int x, int y, int flags, int source) {
        }
        public void onMouseButtonRelease(QXObject obj, int Button, int x, int y, int flags, int source) {
        }
        public void onMouseButtonDblClick(QXObject obj, int Button, int x, int y, int flags, int source) {
        }
        public void onMouseMove(QXObject obj, int Button, int x, int y, int flags, int source) {
        }
        public void onWheel(QXObject obj, int button, int x,int y,int Orientation,int delta, bool inverted) {
        }
    };

    public static class onKeyEventListener {
        public bool onKeyPress(QXObject obj, int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier) {
            return true;
        }
        public bool onKeyRelease(QXObject obj, int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier) {
            return true;
        }
    };

    public static class onClickListener {
        public void onClick(QXObject obj, bool checked) {
        }
        public void onToggle(QXObject obj, bool checked) {
        }
        public void onPress(QXObject obj) {
        }
        public void onRelease(QXObject obj) {
        }
    };

    public static class onFocusEventListener {
        public void onFocusIn(QXObject obj, bool focus, int reson) {
        }
        public void onFocusOut(QXObject obj, bool focus, int reson) {
        }
        public void onFocusAboutToChange(QXObject obj, bool focus, int reson) {
        }
    };

    public static class onScopeEventListener {
        public void onEnter(QXObject obj,int x, int y) {
        }
        public void onLeave(QXObject obj) {
        }
    };

    public static class onPaintListener {
        public void onPaint(QXObject obj, int l,int t, int r,int b, long hpaint) {
        }
    };

    public static class onNotifyListener {
        public void onNotify(QXObject obj, long eventid) {
        }
    };

    public static class onLayoutEventListener {
        public void onMove(QXObject obj, int x,int y,int oldx,int oldy) {
        }
        public void onResize(QXObject obj, int w, int h, int oldw, int oldh) {
        }
    };

    public static class onTreeViewItemEvent {
        public void onItemPressed(QXTreeView, long item, int column) {
        }
        public void onItemClicked(QXTreeView,long item, int column) {
        }
        public void onItemDoubleClicked(QXTreeView,long item, int column) {
        }
        public void onItemActived(QXTreeView,long item, int column) {
        }
        public void onItemEntered(QXTreeView,long item, int column) {
        }
        public void onItemChanged(QXTreeView,long item, int column) {
        }
        public void onItemExpanded(QXTreeView,long item) {
        }
        public void onItemCollapsed(QXTreeView,long item) {
        }
        public void onCurrentItemChanged(QXTreeView,long current, long previous) {
        }
        public void onItemSelectionChanged(QXTreeView) {
        }
    };
    public static class onUpdateListener {
        public void onUpdate(QXObject obj) {
        }
    };

    public static class onEventListener {
        public void onTrigger(QXObject obj) {
        }
    };

    public static class onComboBoxEventListener {
        public void onCurrentTextChange(QXObject obj, String text) {
        }
        public void onActivated(QXObject obj, int id) {
        }
        public void onItemSelected(QXObject obj, int id) {
        }
    };

    public static class onDragListener {
        public bool onDragEnter(QXObject obj, int l,int t,int r,int b) {
            return true;
        }
        public bool onDragMove(QXObject obj,int l,int t,int r,int b) {
            return true;
        }
        public bool onDragLeave(QXObject obj,int l,int t,int r,int b) {
            return true;
        }
        public void onDrop(QXObject obj,Object [] object) {
        }
    };

    public static class onStatusListener {
        public void onCreate(QXObject obj) {
        }
        public void onDestroy(QXObject obj) {
        }
        public void onShow(QXObject obj) {
        }
        public void onHide(QXObject obj) {
        }
        public bool onClose(QXObject obj) {
            return true;
        }
        public void onQuit(QXObject obj) {
        }
        public void onParentChange(QXObject obj) {
        }
        public void onWindowStateChange(QXObject obj, int state, int oldState) {}
    };

    public static class TableWidgetEventListener {
        public void onCellChange(QXTableWidget object, int row,int column) {

        }
        public void onItemChange(QXTableWidget object,long item) {

        }
        public void onCellPress(QXTableWidget object, int row,int column) {

        }
        public void onItemPress(QXTableWidget object,long item) {

        }
        public void onCellClick(QXTableWidget object, int row,int column) {

        }
        public void onItemClick(QXTableWidget object,long item) {

        }
        public void onCellDBClick(QXTableWidget object, int row,int column) {

        }
        public void onItemDBClick(QXTableWidget object,long item) {

        }
        public void onCellEnter(QXTableWidget object, int row,int column) {

        }
        public void onItemEnter(QXTableWidget object,long item) {

        }
        public void onCellActived(QXTableWidget object, int row,int column) {

        }
        public void onItemActived(QXTableWidget object,long item) {

        }
    };
    public static class SciEventListener {
        public void QON_SELCHANGED(QXSci sci, bool yes) {	}
        public void ON_AUTOCCANCELLED(QXSci sci) {	}
        public void ON_AUTOCCHARDELETED(QXSci sci) {	}
        public void ON_AUTOCCOMPLETED(QXSci sci,String selection, int position, int ch, int method) {	}
        public void ON_AUTOCSELECTION(QXSci sci,String selection, int position, int ch, int method) {	}
        public void ON_AUTOCSELECTION(QXSci sci,String selection, int position) {	}
        public void SCEN_CHANGE(QXSci sci) {	}
        public void ON_CALLTIPCLICK(QXSci sci,int direction) {	}
        public void ON_CHARADDED(QXSci sci,int charadded) {	}
        public void ON_DOUBLECLICK(QXSci sci,int position, int line, int modifiers) {	}
        public void ON_DWELLEND(QXSci sci,int position, int x, int y) {	}
        public void ON_DWELLSTART(QXSci sci,int position, int x, int y) {	}
        public void ON_FOCUSIN(QXSci sci) {	}
        public void ON_FOCUSOUT(QXSci sci) {	}
        public void ON_HOTSPOTCLICK(QXSci sci,int position, int modifiers) {	}
        public void ON_HOTSPOTDOUBLECLICK(QXSci sci,int position, int modifiers) {	}
        public void ON_HOTSPOTRELEASECLICK(QXSci sci, int position, int modifiers) {	}
        public void ON_INDICATORCLICK(QXSci sci, int position, int modifiers) {	}
        public void ON_INDICATORRELEASE(QXSci sci, int position, int modifiers) {	}
        public void ON_MACRORECORD(QXSci sci, int msg, long wparam, long lparam) {	}
        public void ON_MARGINCLICK(QXSci sci, int position, int modifiers, int margin) {	}
        public void ON_MARGINRIGHTCLICK(QXSci sci, int position, int modifiers, int margin) {	}
        public void ON_MODIFIED(QXSci sci,
                         int position, int modType,
                         String text, int length,
                         int linesAdded, int line,
                         int foldLevelNow, int foldLevelPrev,
                         int token, int annotationLinesAdded) {		}
        public void ON_MODIFYATTEMPTRO(QXSci sci) {	}
        public void ON_NEEDSHOWN(QXSci sci, int positino, int length) {	}
        public void ON_PAINTED(QXSci sci) {	}
        public void ON_SAVEPOINTLEFT(QXSci sci) {	}
        public void ON_SAVEPOINTREACHED(QXSci sci) {	}
        public void ON_STYLENEEDED(QXSci sci, int position) {	}
        public void ON_UPDATEUI(QXSci sci, int updated) {	}
        public void ON_USERLISTSELECTION(QXSci sci, String text, int wparam, int ch, int listCompletionMethod) {	}
        public void ON_USERLISTSELECTION(QXSci sci, String text, int wparam) {	}
        public void ON_ZOOM(QXSci sci) {	}
    };
    public static class onEditEventListener {
        public void onTextChanged(QXObject, String ) {}
        public void onTextEdited(QXObject, String ) {}
        public void onCursorPositionChanged(QXObject, int,int) {}
        public void onReturnPressed(QXObject) {}
        public void onEditingFinished(QXObject) {}
        public void onSelectionChanged(QXObject) {}
    };
    public static class onContextMenuListener {
        public void onContextMenu(QXObject, int x,int y,int reson);
    };

    public static class onActivateListener {
        public void onWindowActivate(QXObject) {}
        public void onWindowDeactivate(QXObject) {}
    };

    public static class onFileSystemChangeListener {
        public void onFileChanged(QXObject, String path);
        public void onDirChange(QXObject,String path);
    };

    public void setOnFileSystemChangeListener(onFileSystemChangeListener l) {
        _fsweListener = l;
    }
    public TableWidgetEventListener  _tableenvlis = nilptr;
    public onFileSystemChangeListener _fsweListener = nilptr;
    public onEditEventListener	 _editEventListener = nilptr;
    public onMouseEventListener _mouseListener = nilptr;
    public onKeyEventListener   _keyListener = nilptr;
    public onFocusEventListener _focusListener = nilptr;
    public onScopeEventListener _scopeListener = nilptr;
    public onPaintListener      _paintEvent = nilptr;
    public onLayoutEventListener _layoutEvent = nilptr;
    public onStatusListener _statusEvent = nilptr;
    public onUpdateListener _updateListener = nilptr;
    public onEventListener _eventListener = nilptr;
    public onTreeViewItemEvent _treeitemevent = nilptr;
    public onNotifyListener    _notifyListener = nilptr;
    public onClickListener     _clicklistener = nilptr;
    public SciEventListener		_sciEventListener = nilptr;
    public onContextMenuListener	_contextMenuListener = nilptr;
    public onActivateListener _activateListener = nilptr;
    public onComboBoxEventListener _comboboxListener = nilptr;
    public onDragListener _dragListener = nilptr;
    public void setOnDragListener(onDragListener l) {
        _dragListener = l;
    }
    public void setOnTableWidgetEventListener(TableWidgetEventListener l) {
        _tableenvlis = l;
    }
    public void setOnComboBoxEventListener(onComboBoxEventListener l) {
        _comboboxListener = l;
    }
    public void setOnActivateListener(onActivateListener l) {
        _activateListener = l;
    }
    public void setOnContextMenuListener(onContextMenuListener l) {
        _contextMenuListener = l;
    }
    public void setOnSciEventListener(SciEventListener l) {
        _sciEventListener = l;
    }
    public void setOnClickListener(onClickListener l) {
        _clicklistener = l;
    }

    public void setOnNotifyListener(onNotifyListener l) {
        _notifyListener = l;
    }

    public void setOnTreeViewItemEvent(onTreeViewItemEvent l) {
        _treeitemevent = l;
    }
    public void setOnEventListener(onEventListener l) {
        _eventListener = l;
    }
    public void setOnUpdateListener(onUpdateListener l) {
        _updateListener = l;
    }
    public void setOnEditEventListener(onEditEventListener l) {
        _editEventListener = l;
    }
    public void setOnMouseEventListener(onMouseEventListener l) {
        _mouseListener = l;
    }
    public void setOnKeyEventListener(onKeyEventListener l) {
        _keyListener = l;
    }
    public void setOnFocusEventListener(onFocusEventListener l) {
        _focusListener = l;
    }
    public void setOnScopeEventListener(onScopeEventListener l) {
        _scopeListener = l;
    }
    public void setOnPaintListener(onPaintListener l) {
        _paintEvent = l;
    }
    public void setOnLayoutEventListener(onLayoutEventListener l) {
        _layoutEvent = l;
    }
    public void setOnStatusListener(onStatusListener l) {
        _statusEvent = l;
    }

    public void onAttach() {

    }

    public QXObject() {
    }

    public QXObject(long handle) {
        super(handle);
    }

    public QXObject findByName(String name) {
        return (QXObject)findControl(nativehandle, name);
    }

    public QXObject attachByName(@NotNilptr QXObject newObj, String name) {
        newObj.nativehandle = attachControl(nativehandle, newObj, name);
        if (newObj.nativehandle != 0) {
            newObj.onAttach();
            return newObj;
        }
        return nilptr;
    }

    public bool attach(@NotNilptr QXObject obj) {
        nativehandle = core_attach(obj.nativehandle, this);
        if (nativehandle != 0) {
            onAttach();
            return true;
        }
        return false;
    }

    public String getName() {
        return (String)core_getName(nativehandle);
    }

    public void setName(String name) {
        widget_slot_string(nativehandle, OBJECTSETNAME, name);
    }

    public String getClassName() {
        return (String)core_getClassName(nativehandle);
    }

    public QXObject getParent() {
        return (QXObject)core_getParent(nativehandle);
    }

    public void onTimer(int timeId) {}
    ////
    public void onMouseButtonPress(int Button, int x, int y, int flags, int source) {
        if (_mouseListener != nilptr) {
            _mouseListener.onMouseButtonPress(this, Button, x, y, flags, source);
        }
    }

    public void onMouseButtonRelease(int Button, int x, int y, int flags, int source) {
        if (_mouseListener != nilptr) {
            _mouseListener.onMouseButtonRelease(this, Button, x, y, flags, source);
        }
    }

    public void onMouseButtonDblClick(int Button, int x, int y, int flags, int source) {
        if (_mouseListener != nilptr) {
            _mouseListener.onMouseButtonDblClick(this, Button, x, y, flags, source);
        }
    }

    public void onMouseMove(int Button, int x, int y, int flags, int source) {
        if (_mouseListener != nilptr) {
            _mouseListener.onMouseMove(this, Button, x, y, flags, source);
        }
    }
    public void onWheel(int button, int x,int y,int Orientation,int delta, bool inverted) {
        if (_mouseListener != nilptr) {
            _mouseListener.onWheel(this, button, x, y, Orientation, delta, inverted);
        }
    }
    ////
    public bool onKeyPress(int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier) {
        if (_keyListener != nilptr) {
            return _keyListener.onKeyPress(this, key, repeat, count, text, scanCode, virtualKey, modifier);
        }
        return true;
    }
    public bool onKeyRelease(int key, bool repeat, int count, String text, int scanCode, int virtualKey, int modifier) {
        if (_keyListener != nilptr) {
            return _keyListener.onKeyRelease(this, key, repeat, count, text, scanCode, virtualKey, modifier);
        }
        return true;
    }
    public void onFocusIn(bool focus, int reson) {
        if (_focusListener != nilptr) {
            _focusListener.onFocusIn(this, focus, reson);
        }
    }
    public void onFocusOut(bool focus, int reson) {
        if (_focusListener != nilptr) {
            _focusListener.onFocusOut(this, focus, reson);
        }
    }
    public void onFocusAboutToChange(bool focus, int reson) {
        if (_focusListener != nilptr) {
            _focusListener.onFocusAboutToChange(this, focus, reson);
        }
    }
    public void onEnter(int x, int y) {
        if (_scopeListener != nilptr) {
            _scopeListener.onEnter(this, x, y);
        }
    }
    public void onLeave() {
        if (_scopeListener != nilptr) {
            _scopeListener.onLeave(this);
        }
    }
    public void onPaint(int l,int t, int r,int b, long hpaint) {
        if (_paintEvent != nilptr) {
            _paintEvent.onPaint(this, l, t, r, b, hpaint);
        }
    }
    public void onMove(int x,int y,int oldx,int oldy) {
        if (_layoutEvent != nilptr) {
            _layoutEvent.onMove(this, x, y, oldx, oldy);
        }
    }
    public void onResize(int w, int h, int oldw, int oldh) {
        if (_layoutEvent != nilptr) {
            _layoutEvent.onResize(this, w, h, oldw, oldh);
        }
    }
    public void onCreate() {
        if (_statusEvent != nilptr) {
            _statusEvent.onCreate(this);
        }
    }
    public void onDestroy() {
        if (_statusEvent != nilptr) {
            _statusEvent.onDestroy(this);
        }
    }
    public void onShow() {
        if (_statusEvent != nilptr) {
            _statusEvent.onShow(this);
        }
    }
    public void onHide() {
        if (_statusEvent != nilptr) {
            _statusEvent.onHide(this);
        }
    }
    public bool onClose() {
        if (_statusEvent != nilptr) {
            return _statusEvent.onClose(this);
        }
        return true;
    }
    public void onQuit() {
        if (_statusEvent != nilptr) {
            _statusEvent.onQuit(this);
        }
    }
    public void onParentChange() {
        if (_statusEvent != nilptr) {
            _statusEvent.onParentChange(this);
        }
    }

    public void onTrigger() {
        if (_eventListener != nilptr) {
            _eventListener.onTrigger(this);
        }
    }

    public void onParentAboutToChange() {}
    public void onThreadChange() {}
    public void onWindowActivate() {
        if (_activateListener != nilptr) {
            _activateListener.onWindowActivate(this);
        }
    }
    public void onWindowDeactivate() {
        if (_activateListener != nilptr) {
            _activateListener.onWindowDeactivate(this);
        }
    }
    public void onShowToParent() {}
    public void onHideToParent() {  }
    public void onClipboard() {     }
    public void onWinEventAct() {}
    public void onDeferredDelete() {}
    public bool onDragEnter(int l,int t,int r,int b) {
        if (_dragListener != nilptr) {
            return _dragListener.onDragEnter(this, l,t,r,b);
        }
        return true;
    }
    public bool onDragMove(int l,int t,int r,int b) {
        if (_dragListener != nilptr) {
            return _dragListener.onDragMove(this, l,t,r,b);
        }
        return true;
    }
    public bool onDragLeave(int l,int t,int r,int b) {
        if (_dragListener != nilptr) {
            return _dragListener.onDragLeave(this, l,t,r,b);
        }
        return true;
    }
    public void onDrop(Object [] object) {
        if (_dragListener != nilptr) {
            _dragListener.onDrop(this, object);
        }
    }
    public void onDragResponse() {}
    public void onLayoutRequest() {}
    public void onUpdateRequest() {
        if (_updateListener != nilptr) {
            _updateListener.onUpdate(this);
        }
    }
    public void onUpdateLater() {}
    public void onEmbeddingControl() {}
    public void onActivateControl() {}
    public void onDeactivateControl() {}
    public void onContextMenu(int x,int y, int reson) {
        if (_contextMenuListener != nilptr) {
            _contextMenuListener.onContextMenu(this, x, y, reson);
        }
    }
    public void onInputMethod() {}
    public void onTabletMove() {}
    public void onLocaleChange() {}
    public void onLanguageChange() {}
    public void onLayoutDirectionChange() {}
    public void onStyle() {}
    public void onTabletPress() {}
    public void onTabletRelease() {}
    public void onOkRequest() {}
    public void onHelpRequest(int x,int y) {}
    public void onIconDrag() {}
    public void onFontChange() {}
    public void onEnabledChange() {}
    public void onActivationChange() {}
    public void onStyleChange() {}
    public void onIconTextChange() {}
    public void onModifiedChange() {}
    public void onMouseTrackingChange() {}
    public void onWindowBlocked() {}
    public void onWindowUnblocked() {}

    public void onWindowStateChange(int state, int oldState) {
        if (_statusEvent != nilptr) {
            _statusEvent.onWindowStateChange(this, state, oldState);
        }
    }

    public void onReadOnlyChange() {}
    public void onToolTip(int x,int y) {}
    public void onWhatsThis(int x,int y) {}
    public void onStatusTip(String tips) {}
    public void onActionChanged() {}
    public void onActionAdded() {}
    public void onActionRemoved() {}
    public void onFileOpen() {}
    public void onShortcut(int key, int shortcutId, bool ambig) {}
    public void onShortcutOverride() {}
    public void onWhatsThisClicked() {}
    public void onToolBarChange() {}
    public void onApplicationActivate() {}
    public void onApplicationDeactivate() {}
    public void onQueryWhatsThis() {}
    public void onEnterWhatsThisMode() {}
    public void onLeaveWhatsThisMode() {}
    public void onZOrderChange() {}
    public void onHoverEnter(int x,int y) {}
    public void onHoverLeave(int x,int y) {}
    public void onHoverMove(int x,int y) {}
    public void onAcceptDropsChange() {}
    public void onZeroTimerEvent() {}
    public void onGraphicsSceneMouseMove() {}
    public void onGraphicsSceneMousePress() {}
    public void onGraphicsSceneMouseRelease() {}
    public void onGraphicsSceneMouseDoubleClick() {}
    public void onGraphicsSceneContextMenu() {}
    public void onGraphicsSceneHoverEnter() {}
    public void onGraphicsSceneHoverMove() {}
    public void onGraphicsSceneHoverLeave() {}
    public void onGraphicsSceneHelp() {}
    public void onGraphicsSceneDragEnter() {}
    public void onGraphicsSceneDragMove() {}
    public void onGraphicsSceneDragLeave() {}
    public void onGraphicsSceneDrop() {}
    public void onGraphicsSceneWheel() {}
    public void onKeyboardLayoutChange() {}
    public void onDynamicPropertyChange() {}
    public void onTabletEnterProximity() {}
    public void onTabletLeaveProximity() {}
    public void onNonClientAreaMouseMove() {}
    public void onNonClientAreaMouseButtonPress() {}
    public void onNonClientAreaMouseButtonRelease() {}
    public void onNonClientAreaMouseButtonDblClick() {}
    public void onMacSizeChange() {}
    public void onContentsRectChange() {}
    public void onMacGLWindowChange() {}
    public void onFutureCallOut() {}
    public void onGraphicsSceneResize() {}
    public void onGraphicsSceneMove() {}
    public void onCursorChange() {}
    public void onToolTipChange() {}
    public void onNetworkReplyUpdated() {}
    public void onGrabMouse() {}
    public void onUngrabMouse() {}
    public void onGrabKeyboard() {}
    public void onUngrabKeyboard() {}
    public void onMacGLClearDrawable() {}
    public void onStateMachineSignal() {}
    public void onStateMachineWrapped() {}
    public void onTouchBegin() {}
    public void onTouchUpdate() {}
    public void onTouchEnd() {}
    public void onNativeGesture() {}
    public void onRequestSoftwareInputPanel() {}
    public void onCloseSoftwareInputPanel() {}
    public void onWinIdChange() {}
    public void onGesture() {}
    public void onGestureOverride() {}
    public void onScrollPrepare() {}
    public void onScroll() {}
    public void onExpose() {}
    public void onInputMethodQuery() {}
    public void onOrientationChange() {}
    public void onTouchCancel() {}
    public void onThemeChange() {}
    public void onSockClose() {}
    public void onPlatformPanel() {}
    public void onStyleAnimationUpdate() {}
    public void onApplicationStateChange() {}
    public void onWindowChangeInternal() {}
    public void onScreenChangeInternal() {}
    public void onPlatformSurface() {}
    public void onPointer() {}
    public void onTabletTrackingChange() {}
    public void onUser() {}
    public void onMaxUser() {}
    public void setTag(Object obj) {
        widget_set_object_value(nativehandle, SETTAG, obj);
    }
    public Object getTag() {
        return widget_get_object(nativehandle, GETTAG);
    }
    // tree event
    public void onItemPressed(long item, int column) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemPressed((QXTreeView)this, item, column);
        }
    }
    public void onItemClicked(long item, int column) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemClicked((QXTreeView)this, item, column);
        }
    }
    public void onItemDoubleClicked(long item, int column) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemDoubleClicked((QXTreeView)this, item, column);
        }
    }
    public void onItemActived(long item, int column) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemActived((QXTreeView)this, item, column);
        }
    }
    public void onItemEntered(long item, int column) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemEntered((QXTreeView)this, item, column);
        }
    }
    public void onItemChanged(long item, int column) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemChanged((QXTreeView)this, item, column);
        }
    }
    public void onItemExpanded(long item) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemExpanded((QXTreeView)this, item);
        }
    }
    public void onItemCollapsed(long item) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemCollapsed((QXTreeView)this, item);
        }
    }
    public void onCurrentItemChanged(long cur, long previous) {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onCurrentItemChanged((QXTreeView)this, cur, previous);
        }
    }
    public void onItemSelectionChanged() {
        if (_treeitemevent != nilptr) {
            _treeitemevent.onItemSelectionChanged((QXTreeView)this);
        }
    }

    public void onNotify(long eventid) {
        if (_notifyListener != nilptr) {
            _notifyListener.onNotify(this, eventid);
        }
    }

    public void onClick(bool checked) {
        if (_clicklistener != nilptr) {
            _clicklistener.onClick(this, checked);
        }
    }
    public void onToggle(bool checked) {
        if (_clicklistener != nilptr) {
            _clicklistener.onToggle(this, checked);
        }
    }
    public void onPress() {
        if (_clicklistener != nilptr) {
            _clicklistener.onPress(this);
        }
    }
    public void onRelease() {
        if (_clicklistener != nilptr) {
            _clicklistener.onRelease(this);
        }
    }
    public void nativeFinalize() {
        nativehandle = 0;
    }

    public void finalize() {
        if (nativehandle != 0) {
            widget_slot(nativehandle, NATIVEFINALIZE);
        }
    }
    public void onFinish(int res) {
    }
    public void onAccept() {
    }
    public void onReject() {
    }
    public void QON_SELCHANGED(bool yes) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.QON_SELCHANGED((QXSci)this, yes);
        }
    }
    public void ON_AUTOCCANCELLED() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_AUTOCCANCELLED((QXSci)this);
        }
    }
    public void ON_AUTOCCHARDELETED() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_AUTOCCHARDELETED((QXSci)this);
        }
    }
    public void ON_AUTOCCOMPLETED(String selection, int position, int ch, int method) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_AUTOCCOMPLETED((QXSci)this, selection, position, ch, method);
        }
    }
    public void ON_AUTOCSELECTION(String selection, int position, int ch, int method) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_AUTOCSELECTION((QXSci)this, selection, position, ch, method);
        }
    }
    public void ON_AUTOCSELECTION(String selection, int position) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_AUTOCSELECTION((QXSci)this, selection, position);
        }
    }
    public void SCEN_CHANGE() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.SCEN_CHANGE((QXSci)this);
        }
    }
    public void ON_CALLTIPCLICK(int direction) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_CALLTIPCLICK((QXSci)this, direction);
        }
    }
    public void ON_CHARADDED(int charadded) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_CHARADDED((QXSci)this, charadded);
        }
    }
    public void ON_DOUBLECLICK(int position, int line, int modifiers) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_DOUBLECLICK((QXSci)this, position, line, modifiers);
        }
    }
    public void ON_DWELLEND(int position, int x, int y) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_DWELLEND((QXSci)this, position, x, y);
        }
    }
    public void ON_DWELLSTART(int position, int x, int y) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_DWELLSTART((QXSci)this, position, x, y);
        }
    }
    public void ON_FOCUSIN() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_FOCUSIN((QXSci)this);
        }
    }
    public void ON_FOCUSOUT() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_FOCUSOUT((QXSci)this);
        }
    }
    public void ON_HOTSPOTCLICK(int position, int modifiers) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_HOTSPOTCLICK((QXSci)this, position, modifiers);
        }
    }
    public void ON_HOTSPOTDOUBLECLICK(int position, int modifiers) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_HOTSPOTDOUBLECLICK((QXSci)this, position, modifiers);
        }
    }
    public void ON_HOTSPOTRELEASECLICK(int position, int modifiers) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_HOTSPOTRELEASECLICK((QXSci)this, position, modifiers);
        }
    }
    public void ON_INDICATORCLICK(int position, int modifiers) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_INDICATORCLICK((QXSci)this, position, modifiers);
        }
    }
    public void ON_INDICATORRELEASE(int position, int modifiers) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_INDICATORRELEASE((QXSci)this, position, modifiers);
        }
    }
    public void ON_MACRORECORD(int msg, long wparam, long lparam) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_MACRORECORD((QXSci)this, msg, wparam, lparam);
        }
    }
    public void ON_MARGINCLICK(int position, int modifiers, int margin) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_MARGINCLICK((QXSci)this, position, modifiers, margin);
        }
    }
    public void ON_MARGINRIGHTCLICK(int position, int modifiers, int margin) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_MARGINRIGHTCLICK((QXSci)this, position, modifiers, margin);
        }
    }
    public void ON_MODIFIED(int position, int modType, String text, int length, int linesAdded, int line, int foldLevelNow, int foldLevelPrev, int token, int annotationLinesAdded) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_MODIFIED((QXSci)this, position, modType, text, length, linesAdded, line, foldLevelNow, foldLevelPrev, token, annotationLinesAdded);
        }
    }
    public void ON_MODIFYATTEMPTRO() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_MODIFYATTEMPTRO((QXSci)this);
        }
    }
    public void ON_NEEDSHOWN(int position, int length) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_NEEDSHOWN((QXSci)this, position, length);
        }
    }
    public void ON_PAINTED() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_PAINTED((QXSci)this);
        }
    }
    public void ON_SAVEPOINTLEFT() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_SAVEPOINTLEFT((QXSci)this);
        }
    }
    public void ON_SAVEPOINTREACHED() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_SAVEPOINTREACHED((QXSci)this);
        }
    }
    public void ON_STYLENEEDED(int position) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_STYLENEEDED((QXSci)this, position);
        }
    }
    public void ON_UPDATEUI(int updated) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_UPDATEUI((QXSci)this, updated);
        }
    }
    public void ON_USERLISTSELECTION(String text, int wparam, int ch, int listCompletionMethod) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_USERLISTSELECTION((QXSci)this, text, wparam, ch, listCompletionMethod);
        }
    }
    public void ON_USERLISTSELECTION(String text, int wparam) {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_USERLISTSELECTION((QXSci)this, text, wparam);
        }
    }
    public void ON_ZOOM() {
        if (_sciEventListener != nilptr) {
            _sciEventListener.ON_ZOOM((QXSci)this);
        }
    }

    public void onTextChanged(String text) {
        if (_editEventListener != nilptr) {
            _editEventListener.onTextChanged(this, text);
        }
    }

    public void  onTextEdited(String text) {
        if (_editEventListener != nilptr) {
            _editEventListener.onTextEdited(this, text);
        }
    }

    public void onCursorPositionChanged(int n,int o) {
        if (_editEventListener != nilptr) {
            _editEventListener.onCursorPositionChanged(this, n, o);
        }
    }

    public void onReturnPressed() {
        if (_editEventListener != nilptr) {
            _editEventListener.onReturnPressed(this);
        }
    }

    public void onEditingFinished() {
        if (_editEventListener != nilptr) {
            _editEventListener.onEditingFinished(this);
        }
    }

    public void onSelectionChanged() {
        if (_editEventListener != nilptr) {
            _editEventListener.onSelectionChanged(this);
        }
    }

    public void onCurrentTextChange(String text) {
        if (_comboboxListener != nilptr) {
            _comboboxListener.onCurrentTextChange(this, text);
        }
    }

    public void onActivated(int id) {
        if (_comboboxListener != nilptr) {
            _comboboxListener.onActivated(this, id);
        }
    }

    public void onItemSelected(int id) {
        if (_comboboxListener != nilptr) {
            _comboboxListener.onItemSelected(this, id);
        }
    }


    public void onFileChanged(String path) {
        if (_fsweListener != nilptr) {
            _fsweListener.onFileChanged(this, path);
        }
    }

    public void onDirChange(String path) {
        if (_fsweListener != nilptr) {
            _fsweListener.onDirChange(this, path);
        }
    }
    public void onCellChange(int row,int column) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onCellChange((QXTableWidget)this, row, column);
        }
    }
    public void onItemChange(long item) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onItemChange((QXTableWidget)this, item);
        }
    }
    public void onCellPress(int row,int column) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onCellPress((QXTableWidget)this, row, column);
        }
    }
    public void onItemPress(long item) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onItemPress((QXTableWidget)this, item);
        }
    }
    public void onCellClick(int row,int column) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onCellClick((QXTableWidget)this, row, column);
        }
    }
    public void onItemClick(long item) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onItemClick((QXTableWidget)this, item);
        }
    }
    public void onCellDBClick(int row,int column) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onCellDBClick((QXTableWidget)this, row, column);
        }
    }
    public void onItemDBClick(long item) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onItemDBClick((QXTableWidget)this, item);
        }
    }
    public void onCellEnter(int row,int column) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onCellEnter((QXTableWidget)this, row, column);
        }
    }
    public void onItemEnter(long item) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onItemEnter((QXTableWidget)this, item);
        }
    }
    public void onCellActived(int row,int column) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onCellActived((QXTableWidget)this, row, column);
        }
    }
    public void onItemActived(long item) {
        if (_tableenvlis != nilptr) {
            _tableenvlis.onItemActived((QXTableWidget)this, item);
        }
    }
    
    public void onEnumPropertyValueChanged(long prop, int item) {

    }
    
    public void onVariantPropertyValueChanged(long prop, int dataType, String stringValue) {

    }
    
    public void onVariantPropertyAttributeChanged(long prop,String strAttributr, int dataType, String stringValue) {

    }
    
    public static bool associateExt(String strName, String strExt, String strAppName, String args, String strAppKey, String strDefaultIcon, String strDescribe){
        String [] params = {strName, strExt, strAppName, args, strAppKey, strDefaultIcon, strDescribe};
        return array_int2(0, ASSOCIATEEXT, params, 0, 0);
    }
    
    public static bool checkAssociate(String strName, String strExt, String strAppKey){
        String [] params = {strName, strExt, strAppKey};
        return array_int2(0, CHECKASSOCIATED, params, 0, 0);
    }
};