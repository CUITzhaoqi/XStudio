//xlang Source, Name:QXTextEdit.xcsm 
//Date: Thu Sep 20:52:18 2019 

class QXTextEdit : QXWidget{
    public enum Alignment {
        AlignLeft = 0x0001,
        AlignLeading = 0x0001,
        AlignRight = 0x0002,
        AlignTrailing = 0x0002,
        AlignHCenter = 0x0004,
        AlignJustify = 0x0008,
        AlignAbsolute = 0x0010,


        AlignTop = 0x0020,
        AlignBottom = 0x0040,
        AlignVCenter = 0x0080,
        AlignBaseline = 0x0100,
        // Note that 0x100 will clash with Qt::TextSingleLine = 0x100 due to what the comment above
        // this enum declaration states. However, since Qt::AlignBaseline is only used by layouts,
        // it doesn't make sense to pass Qt::AlignBaseline to QPainter::drawText(), so there
        // shouldn't really be any ambiguity between the two overlapping enum values.


        AlignCenter = 0x0080 | 0x0004
    };
    public enum WrapMode {
        NoWrap,
        WordWrap,
        ManualWrap,
        WrapAnywhere,
        WrapAtWordBoundaryOrAnywhere
    };
    public enum LineWrapMode {
        NoWrap,
        WidgetWidth,
        FixedPixelWidth,
        FixedColumnWidth
    };
    public enum AutoFormatting {
        AutoNone = 0,
        AutoBulletList = 0x00000001,
        AutoAll = 0xffffffff
    };
	public QXTextEdit() {//构造
		//TODO:	
	}

	public QXTextEdit(long h) {//构造
		super(h);
	}

    public bool create()override {
        nativehandle = createQObject(QType.qtTextEdit, this, 0);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }
    
    public bool create(@NotNilptr QXWidget parent)override {
        nativehandle = createQObject(QType.qtTextEdit, this, parent.nativehandle);
        if (nativehandle == 0){
            return false;
        }
        return true;
    }   
    
    public static class onChangeListener{
        public void onTextChanged(QXTextEdit obj){
        
        }
        
        public void onCursorPositionChanged(QXTextEdit obj){
            
        }
        
        public void onSelectionChanged(QXTextEdit obj){
            
        }
    };
    
    
    onChangeListener lis = nilptr;
    
    public void setOnChangeListener(onChangeListener l){
        lis = l;
    }
    public void onTextChanged(){
        if (lis != nilptr){
            lis.onTextChanged(this);
        }
    }
    
    public void onCursorPositionChanged(){
        if (lis != nilptr){
            lis.onCursorPositionChanged(this);
        }
    }
    
    public void onSelectionChanged()override {
        if (lis != nilptr){
            lis.onSelectionChanged(this);
        }
    }
    
    public void setReadOnly(bool breadOnly){
        widget_set_bool_value(nativehandle, TESETREADONLY, breadOnly);
    }
    
    public bool isReadOnly(){
        return widget_get_bool_value(nativehandle, TEGETREADONLY);
    }
    
    public Alignment alignment() {
        return (Alignment)widget_get_int_value(nativehandle, TEGETALIGNMENT);
    }
    
    public WrapMode wordWrapMode() {
        return (WrapMode)widget_get_int_value(nativehandle, TEGETWRAPMODE);
    }
    
    public void setWordWrapMode(WrapMode policy){
        widget_set_vint_value(nativehandle, TESETWORDWRAPMODE, policy);
    }
    
    public String toHtml(){
        return (String)core_getString(nativehandle, TETOHTML);
    }
    
    public String toPlainText(){
        return (String)core_getString(nativehandle, TETOPLAINTEXT);
    }
    
    public void setFontPointSize(double s){
        widget_set_double_value(nativehandle, TESETFONTPOINTSIZE, s);
    }
    public void setFontFamily(String fontFamily){
        widget_slot_string(nativehandle, TESETFONTFAMILY, fontFamily);
    }
    public void setFontWeight(int w){
        widget_set_vint_value(nativehandle, TESETFONTWEIGHT, w);
    }
    public void setFontUnderline(bool b){
        widget_set_bool_value(nativehandle, TESETFONTUNDERLINE, b);
    }
    public void setFontItalic(bool b){
        widget_set_bool_value(nativehandle, TESETFONTITALIC, b);
    }
    public void setTextColor(int c){
        widget_set_vint_value(nativehandle, TESETTEXTCOLOR, c);
    }
    public void setTextBackgroundColor(int c){
        widget_set_vint_value(nativehandle, TESETTEXTBACKGROUNDCOLOR, c);
    }
    public void setCurrentFont(@NotNilptr QXFont f){
        widget_set_native_value(nativehandle, TESETCURRENTFONT, f.nativehandle);
    }
    public void setAlignment(Alignment a){
        widget_set_vint_value(nativehandle, TESETALIGNMENT, a);
    }

    public void setPlainText(String text){
        widget_slot_string(nativehandle, TESETPLAINTEXT, text);
    }

    public void setHtml(String text){
        widget_slot_string(nativehandle, TESETHTML, text);
    }

    public void setText(String text){
        widget_slot_string(nativehandle, TESETTEXT, text);
    }


    public void cut(){
        widget_slot(nativehandle, TECUT);
    }
    public void copy(){
        widget_slot(nativehandle, TECOPY);
    }
    public void paste(){
        widget_slot(nativehandle, TEPASTE);
    }

    public AutoFormatting autoFormatting() {
        return (AutoFormatting)widget_get_int_value(nativehandle, TEGETAUTOFORMATTING);
    }
    public void setAutoFormatting(AutoFormatting features){
        widget_set_vint_value(nativehandle, TESETAUTOFORMATTING, features);
    }
    public bool tabChangesFocus() {
        return widget_get_bool_value(nativehandle, TETABCHANGESFOCUS);
    }
    public void setTabChangesFocus(bool b){
        widget_set_bool_value(nativehandle, TESETTABCHANGESFOCUS, b);
    }
    public void setPlaceholderText(String placeholderText){
        widget_slot_string(nativehandle, TESETPLACEHOLDERTEXT, placeholderText);
    }
    public String placeholderText() {
        return (String)core_getString(nativehandle, TEGETPLACEHOLDERTEXT);
    }
    public void undo(){
        widget_slot(nativehandle, TEUNDO);
    }
    public void redo(){
        widget_slot(nativehandle, TEREDO);
    }

    public void clear(){
        widget_slot(nativehandle, TECLEAR);
    }
    public void selectAll(){
        widget_slot(nativehandle, TESELECTALL);
    }

    public void insertPlainText(String text){
        widget_slot_string(nativehandle, TEINSERTPLAINTEXT, text);
    }

    public void insertHtml(String text){
        widget_slot_string(nativehandle, TEINSERTHTML, text);
    }


    public void append(String text){
        widget_slot_string(nativehandle, TEAPPEND, text);
    }

    public void scrollToAnchor(String name){
        widget_slot_string(nativehandle, TESCROLLTOANCHOR, name);
    }

    public void zoomIn(int range ){
        widget_set_vint_value(nativehandle, TEZOOMIN, range);
    }
    public void zoomOut(int range ){
        widget_set_vint_value(nativehandle, TEZOOMOUT, range);
    }
    public void setLineWrapMode(LineWrapMode mode){
        widget_set_vint_value(nativehandle, TESETLINEWRAPMODE, mode);
    }
};