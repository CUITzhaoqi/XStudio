
static class Runnable {
    public void run();
};

class QXWidget : QXObject {
    //WindowType
    public enum RenderFlag {
        DrawWindowBackground = 0x1,
        DrawChildren = 0x2,
        IgnoreMask = 0x4
    };
    public enum RegionType { Rectangle, Ellipse };
    public static const int Widget = 0x00000000;
    public static const int Window = 0x00000001;
    public static const int Dialog = 0x00000002 | Window;
    public static const int Sheet = 0x00000004 | Window;
    public static const int Drawer = Sheet | Dialog;
    public static const int Popup = 0x00000008 | Window;
    public static const int Tool = Popup | Dialog;
    public static const int ToolTip = Popup | Sheet;
    public static const int SplashScreen = ToolTip | Dialog;
    public static const int Desktop = 0x00000010 | Window;
    public static const int SubWindow = 0x00000012;
    public static const int ForeignWindow = 0x00000020 | Window;
    public static const int CoverWindow = 0x00000040 | Window;
    public static const int WindowType_Mask = 0x000000ff;
    public static const int MSWindowsFixedSizeDialogHint = 0x00000100;
    public static const int MSWindowsOwnDC = 0x00000200;
    public static const int BypassWindowManagerHint = 0x00000400;
    public static const int X11BypassWindowManagerHint = BypassWindowManagerHint;
    public static const int FramelessWindowHint = 0x00000800;
    public static const int WindowTitleHint = 0x00001000;
    public static const int WindowSystemMenuHint = 0x00002000;
    public static const int WindowMinimizeButtonHint = 0x00004000;
    public static const int WindowMaximizeButtonHint = 0x00008000;
    public static const int WindowMinMaxButtonsHint = WindowMinimizeButtonHint | WindowMaximizeButtonHint;
    public static const int WindowContextHelpButtonHint = 0x00010000;
    public static const int WindowShadeButtonHint = 0x00020000;
    public static const int WindowStaysOnTopHint = 0x00040000;
    public static const int WindowTransparentForInput = 0x00080000;
    public static const int WindowOverridesSystemGestures = 0x00100000;
    public static const int WindowDoesNotAcceptFocus = 0x00200000;
    public static const int MaximizeUsingFullscreenGeometryHint = 0x00400000;
    public static const int CustomizeWindowHint = 0x02000000;
    public static const int WindowStaysOnBottomHint = 0x04000000;
    public static const int WindowCloseButtonHint = 0x08000000;
    public static const int MacWindowToolBarButtonHint = 0x10000000;
    public static const int BypassGraphicsProxyWidget = 0x20000000;
    public static const int NoDropShadowWindowHint = 0x40000000;
    public static const int WindowFullscreenButtonHint = 0x80000000;
    public static class QPoint {
        public QPoint(int _x,int _y) {
            x = _x;
            y = _y;
        }
        public QPoint(long v) {
            x = (v >> 32) & 0xffffffff;
            y = v & 0xffffffff;
        }
        public int x, y;
    };
    public static const int  AlignLeft = 0x0001,
                      AlignLeading = AlignLeft,
                      AlignRight = 0x0002,
                      AlignTrailing = AlignRight,
                      AlignHCenter = 0x0004,
                      AlignJustify = 0x0008,
                      AlignAbsolute = 0x0010,
                      AlignHorizontal_Mask = AlignLeft | AlignRight | AlignHCenter | AlignJustify | AlignAbsolute,
                      AlignTop = 0x0020,
                      AlignBottom = 0x0040,
                      AlignVCenter = 0x0080,
                      AlignBaseline = 0x0100,
                      // Note that 0x100 will clash with Qt::TextSingleLine = 0x100 due to what the comment above
                      // this enum declaration states. However, since Qt::AlignBaseline is only used by layouts,
                      // it doesn't make sense to pass Qt::AlignBaseline to QPainter::drawText(), so there
                      // shouldn't really be any ambiguity between the two overlapping enum values.
                      AlignVertical_Mask = AlignTop | AlignBottom | AlignVCenter | AlignBaseline,
                      AlignCenter = AlignVCenter | AlignHCenter;
    public enum Orientation {
        Horizontal = 0x1,
        Vertical = 0x2
    };
    public static const int  TopToBottom = 0, BottomToTop = 1;
    public static const int
    NoContextMenu = 0,
    DefaultContextMenu = 1,
    ActionsContextMenu = 2,
    CustomContextMenu = 3,
    PreventContextMenu = 4;

    public static const int
    NoFocus = 0,
    TabFocus = 0x1,
    ClickFocus = 0x2,
    StrongFocus = TabFocus | ClickFocus | 0x8,
    WheelFocus = StrongFocus | 0x4;

    public QXWidget() {
    }



    public static List<Runnable> _uiloop_list = new List<Runnable>();

    public static const int NEW_UI_TASK_NID = 0xf00f00ff;


    public static const int   WA_Disabled = 0,
                       WA_UnderMouse = 1,
                       WA_MouseTracking = 2,
                       WA_ContentsPropagated = 3, // ## deprecated
                       WA_OpaquePaintEvent = 4,
                       WA_NoBackground = WA_OpaquePaintEvent,  // ## deprecated
                       WA_StaticContents = 5,
                       WA_LaidOut = 7,
                       WA_PaintOnScreen = 8,
                       WA_NoSystemBackground = 9,
                       WA_UpdatesDisabled = 10,
                       WA_Mapped = 11,
                       WA_MacNoClickThrough = 12, // Mac only
                       WA_InputMethodEnabled = 14,
                       WA_WState_Visible = 15,
                       WA_WState_Hidden = 16,

                       WA_ForceDisabled = 32,
                       WA_KeyCompression = 33,
                       WA_PendingMoveEvent = 34,
                       WA_PendingResizeEvent = 35,
                       WA_SetPalette = 36,
                       WA_SetFont = 37,
                       WA_SetCursor = 38,
                       WA_NoChildEventsFromChildren = 39,
                       WA_WindowModified = 41,
                       WA_Resized = 42,
                       WA_Moved = 43,
                       WA_PendingUpdate = 44,
                       WA_InvalidSize = 45,
                       WA_MacBrushedMetal = 46, // Mac only
                       WA_MacMetalStyle = WA_MacBrushedMetal, // obsolete
                       WA_CustomWhatsThis = 47,
                       WA_LayoutOnEntireRect = 48,
                       WA_OutsideWSRange = 49,
                       WA_GrabbedShortcut = 50,
                       WA_TransparentForMouseEvents = 51,
                       WA_PaintUnclipped = 52,
                       WA_SetWindowIcon = 53,
                       WA_NoMouseReplay = 54,
                       WA_DeleteOnClose = 55,
                       WA_RightToLeft = 56,
                       WA_SetLayoutDirection = 57,
                       WA_NoChildEventsForParent = 58,
                       WA_ForceUpdatesDisabled = 59,

                       WA_WState_Created = 60,
                       WA_WState_CompressKeys = 61,
                       WA_WState_InPaintEvent = 62,
                       WA_WState_Reparented = 63,
                       WA_WState_ConfigPending = 64,
                       WA_WState_Polished = 66,
                       WA_WState_DND = 67, // ## deprecated
                       WA_WState_OwnSizePolicy = 68,
                       WA_WState_ExplicitShowHide = 69,

                       WA_ShowModal = 70, // ## deprecated
                       WA_MouseNoMask = 71,
                       WA_GroupLeader = 72, // ## deprecated
                       WA_NoMousePropagation = 73, // ## for now, might go away.
                       WA_Hover = 74,
                       WA_InputMethodTransparent = 75, // Don't reset IM when user clicks on this (for virtual keyboards on embedded)
                       WA_QuitOnClose = 76,

                       WA_KeyboardFocusChange = 77,

                       WA_AcceptDrops = 78,
                       WA_DropSiteRegistered = 79, // internal
                       WA_ForceAcceptDrops = WA_DropSiteRegistered, // ## deprecated

                       WA_WindowPropagation = 80,

                       WA_NoX11EventCompression = 81,
                       WA_TintedBackground = 82,
                       WA_X11OpenGLOverlay = 83,
                       WA_AlwaysShowToolTips = 84,
                       WA_MacOpaqueSizeGrip = 85,
                       WA_SetStyle = 86,

                       WA_SetLocale = 87,
                       WA_MacShowFocusRect = 88,

                       WA_MacNormalSize = 89,  // Mac only
                       WA_MacSmallSize = 90,   // Mac only
                       WA_MacMiniSize = 91,    // Mac only

                       WA_LayoutUsesWidgetRect = 92,
                       WA_StyledBackground = 93, // internal
                       WA_MSWindowsUseDirect3D = 94, // Win only
                       WA_CanHostQMdiSubWindowTitleBar = 95, // Internal

                       WA_MacAlwaysShowToolWindow = 96, // Mac only

                       WA_StyleSheet = 97, // internal

                       WA_ShowWithoutActivating = 98,

                       WA_X11BypassTransientForHint = 99,

                       WA_NativeWindow = 100,
                       WA_DontCreateNativeAncestors = 101,

                       WA_MacVariableSize = 102,    // Mac only

                       WA_DontShowOnScreen = 103,

                       // window types from http://standards.freedesktop.org/wm-spec/
                       WA_X11NetWmWindowTypeDesktop = 104,
                       WA_X11NetWmWindowTypeDock = 105,
                       WA_X11NetWmWindowTypeToolBar = 106,
                       WA_X11NetWmWindowTypeMenu = 107,
                       WA_X11NetWmWindowTypeUtility = 108,
                       WA_X11NetWmWindowTypeSplash = 109,
                       WA_X11NetWmWindowTypeDialog = 110,
                       WA_X11NetWmWindowTypeDropDownMenu = 111,
                       WA_X11NetWmWindowTypePopupMenu = 112,
                       WA_X11NetWmWindowTypeToolTip = 113,
                       WA_X11NetWmWindowTypeNotification = 114,
                       WA_X11NetWmWindowTypeCombo = 115,
                       WA_X11NetWmWindowTypeDND = 116,

                       WA_MacFrameworkScaled  = 117,

                       WA_SetWindowModality = 118,
                       WA_WState_WindowOpacitySet = 119, // internal
                       WA_TranslucentBackground = 120,

                       WA_AcceptTouchEvents = 121,
                       WA_WState_AcceptedTouchBeginEvent = 122,
                       WA_TouchPadAcceptSingleTouchEvents = 123,

                       WA_X11DoNotAcceptFocus = 126,
                       WA_MacNoShadow = 127,

                       WA_AlwaysStackOnTop = 128,

                       WA_TabletTracking = 129,

                       // Add new attributes before this line
                       WA_AttributeCount = 130;

    public void runOnUi(Runnable task) {
        synchronized(_uiloop_list) {
            _uiloop_list.add(task);
        }
        Notify(NEW_UI_TASK_NID);
    }

    public static void runOnThread(Runnable task) {
        new Thread() {
            void run()override {
                task.run();
            }
        } .start();
    }

    private final void onNotify(long eventid)override {
        if (eventid == NEW_UI_TASK_NID) {
            while (_uiloop_list.size() > 0) {
                Runnable r;
                synchronized(_uiloop_list) {
                    if (_uiloop_list.size() > 0) {
                        try{
                            r = _uiloop_list.pollHead();
                        }catch(IllegalArgumentException e){
                            
                        }
                    }
                }
                if (r != nilptr) {
                    r.run();
                }
            }
        } else {
            onNotification(eventid);
        }
    }


    public void onNotification(long eventid) {
        if (_notifyListener != nilptr) {
            _notifyListener.onNotify(this, eventid);
        }
    }

    public QXWidget(long h) {
        super(h);
    }

    public bool create() {
        nativehandle = createQObject(QType.qtWidget, this, 0);
        if (nativehandle == 0) {
            return false;
        }
        return true;
    }

    public void setAttribute(int flag, bool bOn) {
        widget_set_int_bool_value(nativehandle, QXCore.SETATTRIBUTE, flag, bOn);
    }

    public bool create(@NotNilptr QXWidget parent) {
        nativehandle = createQObject(QType.qtWidget, this, parent.nativehandle);
        if (nativehandle == 0) {
            return false;
        }
        return true;
    }

    public bool load(String uifile) {
        nativehandle = locaUiFile(uifile, this, 0);
        if (nativehandle == 0) {
            return false;
        }
        return true;
    }
    public bool load(String uifile, @NotNilptr QXWidget parent) {
        nativehandle = locaUiFile(uifile, this, parent.nativehandle);
        if (nativehandle == 0) {
            return false;
        }
        return true;
    }
    public bool load(@NotNilptr QXBuffer data) {
        nativehandle = locaUiData(data.nativehandle, this, 0);
        if (nativehandle == 0) {
            return false;
        }
        return true;
    }
    public bool load(@NotNilptr QXBuffer data, @NotNilptr QXWidget parent) {
        nativehandle = locaUiData(data.nativehandle, this, parent.nativehandle);
        if (nativehandle == 0) {
            return false;
        }
        return true;
    }
    public void setParent(@NotNilptr QXWidget parent) {
        widget_set_native_value(nativehandle, QXCore.PARENTWIDGET, parent.nativehandle);
    }

    public double getOpacity() {
        return widget_get_double_value(nativehandle,QXCore.OPACITY);
    }

    public void setModal(bool bm) {
        widget_set_bool_value(nativehandle, QXCore.MODAL, bm);
    }

    public bool isVisible() {
        return widget_get_bool_value(nativehandle, QXCore.VISIBLE);
    }

    public bool maximized() {
        return widget_get_bool_value(nativehandle, QXCore.MAXIMIZED);
    }

    public bool minimized() {
        return widget_get_bool_value(nativehandle, QXCore.MINIMIZED);
    }

    public bool isEnabled() {
        return widget_get_bool_value(nativehandle, QXCore.ENABLED);
    }

    public bool isActive() {
        return widget_get_bool_value(nativehandle, QXCore.ACTIVED);
    }



    public void setOpacity(double v) {
        widget_set_double_value(nativehandle,QXCore.OPACITY, v);
    }

    public void setVisible(bool v) {
        widget_set_bool_value(nativehandle, QXCore.VISIBLE, v);
    }

    public void setMaximized(bool v) {
        widget_set_bool_value(nativehandle, QXCore.MAXIMIZED, v);
    }

    public void setMinimized(bool v) {
        widget_set_bool_value(nativehandle, QXCore.MINIMIZED, v);
    }

    public void setEnabled(bool v) {
        widget_set_bool_value(nativehandle, QXCore.ENABLED, v);
    }

    public void setActive(bool v) {
        widget_set_bool_value(nativehandle, QXCore.ACTIVED, v);
    }

    public void setFocusPolicy(int fcy)   {
        widget_set_vint_value(nativehandle, QXCore.SETFOCUSPOLICY, fcy);
    }

    public int getFocusPolicy() {
        return widget_get_int_value(nativehandle, QXCore.SETFOCUSPOLICY);
    }
    public int getMinimumHeight() {
        return widget_get_int_value(nativehandle, QXCore.MINIMUMHEIGHT);
    }

    public int getMaximumHeight() {
        return widget_get_int_value(nativehandle, QXCore.MAXIMUMHEIGHT);
    }

    public int getMinimumWidth() {
        return widget_get_int_value(nativehandle, QXCore.MINIMUMWIDTH);
    }

    public int getMaximumWidth() {
        return widget_get_int_value(nativehandle, QXCore.MAXIMUMWIDTH);
    }

    public int x() {
        return widget_get_int_value(nativehandle, QXCore.X_POS);
    }

    public int y() {
        return widget_get_int_value(nativehandle, QXCore.Y_POS);
    }

    public int width() {
        return widget_get_int_value(nativehandle, QXCore.WIDTH);
    }

    public int height() {
        return widget_get_int_value(nativehandle, QXCore.HEIGHT);
    }

    public bool isFullScreen() {
        return widget_get_bool_value(nativehandle, QXCore.FULLSCREEN);
    }

    public bool isHidden() {
        return widget_get_bool_value(nativehandle, QXCore.HIDDEN);
    }

    public bool isModal() {
        return widget_get_bool_value(nativehandle, QXCore.MODAL);
    }

    public bool isWindow() {
        return widget_get_bool_value(nativehandle, QXCore.WINDOW);
    }

    public void resize(int w,int h) {
        widget_set_v2int_value(nativehandle, QXCore.RESIZE, w, h);
    }

    public void scroll(int dx,int dy) {
        widget_set_v2int_value(nativehandle, QXCore.SCROLL, dx, dy);
    }

    public void setBackgroundRole(int role) {
        widget_set_bkrl(nativehandle, role);
    }

    public void setCursor() {

    }

    public void move(int x,int y) {
        widget_set_v2int_value(nativehandle, QXCore.MOVE, x, y);
    }

    public void setFixedHeight(int h) {
        widget_set_vint_value(nativehandle, QXCore.FIXEDHEIGHT, h);
    }

    public void setWindowFlags(int flag/*WindowType*/) {
        widget_set_vint_value(nativehandle, QXCore.WINDOWFLAG, flag);
    }

    public void setWindowFlag(int flag/*WindowType*/, bool bOn) {
        widget_set_int_bool_value(nativehandle, QXCore.SETWINDOWFLAG, flag, bOn);
    }
    public String getStyleSheet() {
        return (String)core_getString(nativehandle, GETSTYLESHEEY);
    }
    public void addAction(@NotNilptr QXAction action) {
        widget_set_native_value(nativehandle, ADDDEFACTION, action.nativehandle);
    }
    public void addActions(@NotNilptr QXAction []actions) {
        long [] al = new long[actions.length];
        for (int i =0; i < al.length; i ++) {
            al[i] = actions[i].nativehandle;
        }
        widget_set_object_value(nativehandle, ADDDEFACTION, al);
    }

    public void setWindowIcon(String icon) {
        widget_slot_string(nativehandle, QXCore.WINDOWICON, icon);
    }
    public void setContextMenuPolicy(int v) {
        widget_set_vint_value(nativehandle, SETCONTEXTMENUPOLICY, v);
    }
    public void setFixedSize(int w, int h) {
        widget_set_v2int_value(nativehandle, QXCore.FIXEDSIZE, w, h);
    }
    public void setFontDescrption(String desc) {
        widget_slot_string(nativehandle, QXCore.SETWIDGETFONT, desc);
    }
    public void setFixedWidth(int w) {
        widget_set_vint_value(nativehandle, QXCore.FIXEDWIDTH, w);
    }

    public void setPalette(int flags, int color) {
        widget_set_v2int_value(nativehandle, QXCore.PALETTE, flags, color);
    }

    public void
    setPalette(@NotNilptr QXPalette palette) {
        widget_set_native_value(nativehandle, QXCore.PALETTE, palette.nativehandle);
    }

    public void
    setStyle(@NotNilptr QXStyle style) {
        widget_set_native_value(nativehandle, QXCore.STYLE, style.nativehandle);
    }

    //virtual
    public void close() {
        widget_slot(nativehandle, QXCore.CLOSE);
    }
    public void hide() {
        widget_slot(nativehandle, QXCore.HIDE);
    }
    public void lower() {
        widget_slot(nativehandle, QXCore.LOWER);
    }
    public void raise() {
        widget_slot(nativehandle, QXCore.RAISE);
    }
    public void repaint() {
        widget_slot(nativehandle, QXCore.REPAINT);
    }
    public void update() {
        widget_slot(nativehandle, QXCore.UPDATE);
    }
    public void setFocus() {
        widget_slot(nativehandle, QXCore.SETFOCUS);
    }

    public void
    setWindowTitle(String text) {
        widget_slot_string(nativehandle, QXCore.WINDOWTITLE, text);
    }

    public void
    show() {
        widget_slot(nativehandle, QXCore.SHOW);
    }
    public void
    showFullScreen() {
        widget_slot(nativehandle, QXCore.SHOWFULLSCREEN);
    }
    public void
    showMaximized() {
        widget_slot(nativehandle, QXCore.SHOWMAX);
    }
    public void
    showMinimized() {
        widget_slot(nativehandle, QXCore.SHOWMIN);
    }
    public void
    showNormal() {
        widget_slot(nativehandle, QXCore.SHOWNORMAL);
    }
    public int Critical(String caption, String text, int button, int defaultBtn) {
        return long_string2_int2(nativehandle, MESSAGEBOXERR, caption, text, button, defaultBtn);
    }
    public int Warning(String caption, String text, int button, int defaultBtn) {
        return long_string2_int2(nativehandle, MESSAGEBOXWAR, caption, text, button, defaultBtn);
    }

    public int Question(String caption, String text, int button, int defaultBtn) {
        return long_string2_int2(nativehandle, MESSAGEBOXQUE, caption, text, button, defaultBtn);
    }
    public int Information(String caption, String text, int button, int defaultBtn) {
        return long_string2_int2(nativehandle, MESSAGEBOXINF, caption, text, button, defaultBtn);
    }

    public void About(String caption, String text) {
        long_string2_int2(nativehandle, MESSAGEBOXABT, caption, text, 0, 0);
    }

    public void setCursor(int cursor) {
        widget_set_vint_value(nativehandle, SETCURSOR, cursor);
    }

    public @NotNilptr QPoint mapTo(@NotNilptr QXWidget w, int x,int y) {
        long v = x;
        v = (v << 32) | y;
        v = long_intlong2(nativehandle, MAPPOINT, w.nativehandle, v);
        return new QPoint(v);
    }
    public @NotNilptr  QPoint mapToGlobal(int x,int y) {
        long v = x;
        v = (v << 32) | y;
        v = long_intlong2(nativehandle, MAPPOINT, 0, v);
        return new QPoint(v);
    }
    public @NotNilptr  QPoint mapFromGlobal(int x,int y) {
        long v = x;
        v = (v << 32) | y;
        v = long_intlong2(0, MAPPOINT, nativehandle, v);
        return new QPoint(v);
    }
    public @NotNilptr  QXPoint getScreenPoint(int num) {
        long xy = object_get_long_int(nativehandle, QXCore.SCREENPOSITION, num, 0);
        return new QXPoint((int)(xy >> 32) & 0xffffffff, (int)xy & 0xffffffff);
    }
    public @NotNilptr  QXPoint getCurrentScreenPoint() {
        long xy = object_get_long_int(nativehandle, QXCore.SCREENPOSITION, -1, 0);
        return new QXPoint((int)(xy >> 32) & 0xffffffff, (int)xy & 0xffffffff);
    }
    public @NotNilptr  QXRect getScreenSize(int num) {
        long wh = object_get_long_int(nativehandle, QXCore.SCREENSIZE, num, 0);
        return new QXRect(0, 0, (int)(wh >> 32) & 0xffffffff, (int)wh & 0xffffffff);
    }
    public @NotNilptr  QXRect getCurrentScreenSize() {
        long wh = object_get_long_int(nativehandle, QXCore.SCREENSIZE, -1, 0);
        return new QXRect(0, 0, (int)(wh >> 32) & 0xffffffff, (int)wh & 0xffffffff);
    }
    public int getCurrentScreen() {
        return widget_get_int_value(nativehandle, QXCore.CURRENTSCREEN);
    }
    //不能在工作线程中update 要在UI线程中执行
    public final void postUpdate() {
        runOnUi(new Runnable() {
            void run()override {
                QXWidget.this.update();
            }
        });
    }
    public void setStyleSheet(String file) {
        widget_slot_string(nativehandle, QXCore.SETSTYLESHEET, file);
    }
    public void setStyle(String styneName) {
        widget_slot_string(nativehandle, QXCore.SETSTYLE, styneName);
    }
    public void setStyleSheetString(String stylesheet) {
        widget_slot_string(nativehandle, QXCore.SETSTYLESHEETSTRING, stylesheet);
    }
    public void setWhatsThis(String tips) {
        widget_slot_string(nativehandle, QXCore.SETWHATSTHIS, tips);
    }
    public void centerScreen() {
        QXRect rc = getCurrentScreenSize();
        rc.offset(getCurrentScreenPoint());
        move((rc.width() - width()) / 2, (rc.height() - height()) / 2);
    }

    public bool hasFocus() {
        return widget_get_bool_value(nativehandle, QXCore.HASFOCUS);
    }

    public String getToolTips() {
        return (String)core_getString(nativehandle, QXCore.GETTOOLTIPS);
    }

    public void setToolTips(String text) {
        widget_slot_string(nativehandle, QXCore.SETTOOLTIPS, text);
    }
    public void setLayout(@NotNilptr QLayout layout){
        widget_set_native_value(nativehandle, QXCore.SETLAYOUT, layout.nativehandle);
    }
    public void showToolTips(int x, int y, long duration) {
        widget_set_intlongstring_value(nativehandle, QXCore.SHOWTOOLTIPS, ((long)x) << 32 |  y, (int)duration, nilptr);
    }
    public void showToolTips(int x, int y, String text, long duration) {
        widget_set_intlongstring_value(nativehandle, QXCore.SHOWTOOLTIPS, ((long)x) << 32 |  y,  (int)duration, text);
    }
    public static void ShowToolTips(int x, int y, String text, long duration) {
        widget_set_intlongstring_value(0, QXCore.SHOWTOOLTIPS, ((long)x) << 32 |  y,  (int) duration, text);
    }

    public bool isAcceptDrops() {
        return widget_get_bool_value(nativehandle, QXCore.ENABLEDROG);
    }

    public void setAcceptDrops(bool ba) {
        widget_set_bool_value(nativehandle, QXCore.ENABLEDROG, ba);
    }

    public void setUpdateEnabled(bool be) {
        widget_set_bool_value(nativehandle, UPDATEENABLE, be);
    }

    public bool isUpdateEnabled() {
        return widget_get_bool_value(nativehandle,UPDATEENABLE );
    }
    public void render(@NotNilptr QXPainter painter){
        long_long_int9(nativehandle, WIDGETRENDER1, painter.hpaint, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
    public void render(@NotNilptr QXPainter painter, RenderFlag flags){
        long_long_int9(nativehandle, WIDGETRENDER1, painter.hpaint, 0, 0, 0, 0, 0, 0, 0, flags, 0);
    }
    public void render(@NotNilptr QXPainter painter, int x,int y, RenderFlag flags){
        long_long_int9(nativehandle, WIDGETRENDER1, painter.hpaint, x, y, 0, 0, 0, 0, 0, flags, 0);
    }
    public void render(@NotNilptr QXPainter painter, int x,int y, int sx,int sy,int sw,int sh,RegionType sflags, RenderFlag flags){
        long_long_int9(nativehandle, WIDGETRENDER1, painter.hpaint, x, y, sx, sy, sw, sh, sflags, flags, 0);
    }
    
    public @NotNilptr String getWindowTitle(){
        return (String)core_getString(nativehandle, WIDGETGETTITLE);
    }
    void finalize(){
        if (nativehandle != 0) {
            runOnUi(new Runnable(){
                long handle = nativehandle;
                void run()override{
                    widget_slot(handle, NATIVEFINALIZE);
                }
            });
        }
    }
};