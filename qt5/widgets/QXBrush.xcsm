//xlang Source, Name:qt5/widgets/QXBrush.xcsm 
//Date: Thu Apr 18:46:27 2019 

class QXBrush : QXNative{

	/** @brush style
	*/
	public enum Style{
		NoBrush ,
		SolidPattern ,
		Dense1Pattern ,
		Dense2Pattern ,
		Dense3Pattern ,
		Dense4Pattern ,
		Dense5Pattern ,
		Dense6Pattern ,
		Dense7Pattern ,
		HorPattern ,
		VerPattern ,
		CrossPattern ,
		BDiagPattern ,
		FDiagPattern ,
		DiagCrossPattern ,
		LinearGradientPattern ,
		RadialGradientPattern ,
		ConicalGradientPattern ,
		TexturePattern = 24
	};

	public enum Spread{
        PadSpread ,
        ReflectSpread ,
        RepeatSpread 
    };
    
	public static class Gradient{
		public long gradhandle = 0;
        
		int nstyle = Style.LinearGradientPattern;
                
		public Gradient(int style){
			nstyle = style;
        }
		
        public bool create(double [] data){
			if (gradhandle != 0){
				return false;
            }
            
			switch(nstyle){
				case Style.LinearGradientPattern:
					gradhandle = QXNative.createPObject(QType.qtLineGradient, data);
                break;
                case Style.RadialGradientPattern:
					{
						switch(data.length){
							case 3:
								gradhandle = QXNative.createPObject(QType.qtRadialGradient3, data);
                            break;
                            case 5:
								gradhandle = QXNative.createPObject(QType.qtRadialGradient5, data);
                            break;
                            case 6:
								gradhandle = QXNative.createPObject(QType.qtRadialGradient6, data);
                            break;
                        }
                    }
                break;
                case Style.ConicalGradientPattern:
					gradhandle = QXNative.createPObject(QType.qtConicalGradient, data);
                break;
            }
            return gradhandle != 0;
        }
        
        public void setColorAt(double pos, int color){
			widget_set_v2int_double_value(gradhandle, QXCore.SETCOLORAT, color, pos, 0);
        }
        
        public void setSpread(int spread){
			widget_set_vint_value(gradhandle, QXCore.SETSPREAD, spread);
        } 
        
        public void finalize(){
			if (gradhandle != 0){
				QXNative.widget_slot(gradhandle, QXCore.DELLOCGRADIENT);
			}
		}
    };
    
    public static class QXLinearGradient : Gradient{
		public QXLinearGradient(double x,double y,double ex,double ey){
			super(Style.LinearGradientPattern);
            double [] _params = {x, y, ex, ey};
            if (create(_params) == false){
				throw new IllegalArgumentException("can not create QXLinearGradient");
            }
        }

    };
    
    public static class QXRadialGradient : Gradient{
		public QXRadialGradient(double x,double y,double r){
			super(Style.RadialGradientPattern);
            double [] _params = {x, y, r};
            if (create(_params) == false){
				throw new IllegalArgumentException("can not create QXRadialGradient");
            }
        }
        
        public QXRadialGradient(double x,double y,double r,double fx,double fy){
			super(Style.RadialGradientPattern);
            double [] _params = {x, y, r, fx, fy};
            if (create(_params) == false){
				throw new IllegalArgumentException("can not create QXRadialGradient");
            }
        }
        
        public QXRadialGradient(double x,double y,double r,double fx,double fy, double fr){
			super(Style.RadialGradientPattern);
            double [] _params = {x, y, r, fx, fy, fr};
            if (create(_params) == false){
				throw new IllegalArgumentException("can not create QXRadialGradient");
            }
        }
    };
    
    public static class QXConicalGradient : Gradient{
		public QXConicalGradient(double cx,double cy,double s){
			super(Style.ConicalGradientPattern);
            double [] _params = {cx, cy, s};
            if (create(_params) == false){
				throw new IllegalArgumentException("can not create QXConicalGradient");
            }
        }
    };
    
	public QXBrush() {//构造
		nativehandle = createNObject(QType.qtBrush, 0);
        if (nativehandle == 0){
            throw new IllegalArgumentException("can not create QXBrush");
        }
	}

	public QXBrush(Gradient grad){
        nativehandle = createNObject(QType.qtBrush, grad.gradhandle);
        if (nativehandle == 0){
            throw new IllegalArgumentException("can not create QXBrush");
        }
    }
	
    public QXBrush(QXImage img){
        nativehandle = createNObject(QType.qtImgBrush, img.himage);
        if (nativehandle == 0){
            throw new IllegalArgumentException("can not create QXBrush");
        }
    }
    
	public void finalize(){
		if (nativehandle != 0){
			QXNative.widget_slot(nativehandle, QXCore.DELLOCBRUSH);
        }
    }
    
    
};